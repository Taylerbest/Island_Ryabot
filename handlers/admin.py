from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from database.models import get_user, update_user_resources

router = Router()

ADMIN_IDS = [123456789]  # ‚Üê –¢–≤–æ–π Telegram ID


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


@router.message(Command("admin"))
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return

    await message.answer("""
üõ†Ô∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

/give [user_id] [ryabucks] - –í—ã–¥–∞—Ç—å —Ä—è–±–∞–∫—Å—ã
/setlevel [user_id] [level] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
    """)


@router.message(Command("give"))
async def give_command(message: Message):
    if not is_admin(message.from_user.id):
        return

    try:
        parts = message.text.split()
        user_id = int(parts[1])
        amount = int(parts[2])

        await update_user_resources(user_id, ryabucks=amount)
        await message.answer(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount}üíµ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give [user_id] [amount]")


@router.message(Command("stats"))
async def stats_command(message: Message):
    if not is_admin(message.from_user.id):
        return

    from database.models import execute_db

    total = await execute_db("SELECT COUNT(*) FROM users", fetch_one=True)
    active_today = await execute_db("""
                                    SELECT COUNT(*)
                                    FROM users
                                    WHERE date (last_active) = date ('now')
                                    """, fetch_one=True)

    await message.answer(f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total[0]}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today[0]}
    """)
