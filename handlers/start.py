"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é Ryabot Island (–≤–µ—Ä—Å–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏)
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import random

from database.models import (
    get_user, create_user, update_user_language, init_database,
    get_island_stats, complete_tutorial, set_user_state, clear_user_state
)
from keyboards.main_menu import get_start_menu, get_island_menu, get_tutorial_keyboard
from utils.texts import get_text, t
from utils.states import MenuState, TutorialState
from locales.ru import GAME_PRICES

router = Router()

@router.message(Command('start'))
async def start_handler(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞/–Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã"""
    user_id = message.from_user.id
    username = message.from_user.username

    await init_database()
    user = await get_user(user_id)

    if not user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=t('language_ru'), callback_data="lang_ru")]
        ])

        await message.answer(
            text=t('choose_language'),
            reply_markup=keyboard
        )
        await state.set_state(MenuState.OUTSIDE_ISLAND)
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
        await clear_user_state(user_id)
        await show_start_menu(message, user, state)

@router.message(Command('menu'))
async def menu_handler(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /menu - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    user = await get_user(user_id)

    if not user:
        await start_handler(message, state)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Å—Ç—Ä–æ–≤–∞
    menu_text = t('main_menu_message', user.language,
        level=user.level,
        energy=user.energy,
        ryabucks=user.ryabucks,
        rbtc=f"{user.rbtc:.2f}"
    )

    await message.answer(
        text=menu_text,
        reply_markup=get_island_menu(user.language)
    )
    await state.set_state(MenuState.ON_ISLAND)

@router.message(Command('economy'))
async def economy_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /economy - –æ–±–∑–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏"""
    user_id = message.from_user.id
    user = await get_user(user_id)

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –Ω–∞ –æ—Å—Ç—Ä–æ–≤: /start")
        return

    economy_text = t('economy_overview', user.language, **GAME_PRICES)

    await message.answer(text=economy_text)

@router.message(Command('claim'))
async def claim_energy_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /claim - —Å–±–æ—Ä —ç–Ω–µ—Ä–≥–∏–∏ —Å –∫–æ–Ω—é—à–Ω–∏"""
    user_id = message.from_user.id
    user = await get_user(user_id)

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –Ω–∞ –æ—Å—Ç—Ä–æ–≤: /start")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—é—à–Ω—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    has_stable = user.level >= 2  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ

    if not has_stable:
        no_stable_text = t('no_stable', user.language,
                          stable_price=GAME_PRICES['stable_price'])
        await message.answer(text=no_stable_text)
        return

    # –°–∏–º—É–ª—è—Ü–∏—è: —ç–Ω–µ—Ä–≥–∏—è –≥–æ—Ç–æ–≤–∞ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ —ç—Ç–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    last_claim = datetime.now() - timedelta(hours=5)  # –°–∏–º—É–ª—è—Ü–∏—è
    next_claim = last_claim + timedelta(hours=4)

    if datetime.now() < next_claim:
        time_left = str(next_claim - datetime.now()).split('.')[0]
        not_ready_text = t('energy_not_ready', user.language,
            time_left=time_left,
            current_energy=user.energy
        )
        await message.answer(text=not_ready_text)
        return

    # –ù–∞—á–∏—Å–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
    energy_amount = random.randint(15, 25)
    new_energy = min(100, user.energy + energy_amount)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ (–ø–æ–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    claimed_text = t('energy_claimed', user.language,
        energy_amount=energy_amount,
        current_energy=new_energy,
        next_claim_time="4 —á–∞—Å–∞"
    )

    await message.answer(text=claimed_text)

@router.message(Command('gather'))
async def gather_all_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /gather - —Å–±–æ—Ä –≤—Å–µ–≥–æ —Å —Ñ–µ—Ä–º—ã (Premium)"""
    user_id = message.from_user.id
    user = await get_user(user_id)

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –Ω–∞ –æ—Å—Ç—Ä–æ–≤: /start")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Quantum Pass (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    has_quantum_pass = user.level >= 10  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ

    if not has_quantum_pass:
        premium_text = t('gather_premium_only', user.language)
        await message.answer(text=premium_text)
        return

    # –°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—Ä–∞ —Å —Ñ–µ—Ä–º—ã
    has_resources = random.choice([True, False])

    if not has_resources:
        nothing_text = t('gather_all_nothing', user.language,
            eggs_time_left="2 —á–∞—Å–∞",
            milk_time_left="3 —á–∞—Å–∞",
            crops_time_left="1 —á–∞—Å"
        )
        await message.answer(text=nothing_text)
        return

    # –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–±–æ—Ä–∞
    eggs = random.randint(5, 15)
    milk = random.randint(3, 8)
    crops = random.randint(10, 25)
    honey = random.randint(2, 6)
    total_income = eggs * 10 + milk * 15 + crops * 5 + honey * 20

    success_text = t('gather_all_success', user.language,
        eggs_collected=eggs,
        milk_collected=milk,
        crops_collected=crops,
        honey_collected=honey,
        total_income=total_income
    )

    await message.answer(text=success_text)

async def show_start_menu(message: Message, user, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ—Å—Ç—Ä–æ–≤–∞"""
    stats = await get_island_stats()

    welcome_text = t('welcome_to_game', user.language,
        online_players=stats['online_players'],
        daily_rbtc=f"{stats['daily_rbtc']:.2f}",
        active_expeditions=stats['active_expeditions']
    )

    await message.answer(
        text=welcome_text,
        reply_markup=get_start_menu(user.language)
    )
    await state.set_state(MenuState.OUTSIDE_ISLAND)

@router.callback_query(F.data.startswith('lang_'))
async def language_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    user_id = callback.from_user.id
    username = callback.from_user.username
    language = callback.data.split('_')[1]

    user = await create_user(user_id, username)
    await update_user_language(user_id, language)

    await callback.message.edit_text(text=t('language_selected', language))
    await show_start_menu(callback.message, user, state)
    await callback.answer()

@router.message(F.text == "üèùÔ∏è –í–æ–π—Ç–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤")
async def enter_island(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤"""
    user_id = message.from_user.id
    user = await get_user(user_id)

    if not user:
        await start_handler(message, state)
        return

    if not user.tutorial_completed:
        await start_tutorial(message, user, state)
        return

    entering_text = t('entering_island', user.language,
        level=user.level,
        energy=user.energy,
        ryabucks=user.ryabucks,
        rbtc=f"{user.rbtc:.2f}"
    )

    await message.answer(
        text=entering_text,
        reply_markup=get_island_menu(user.language)
    )
    await state.set_state(MenuState.ON_ISLAND)

# –¢—É—Ç–æ—Ä–∏–∞–ª (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def start_tutorial(message: Message, user, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
    tutorial_text = t('tutorial_welcome', user.language)

    await message.answer(
        text=tutorial_text,
        reply_markup=get_tutorial_keyboard(0, user.language)
    )
    await state.set_state(TutorialState.STEP_1)

@router.callback_query(F.data == "tutorial_start")
async def tutorial_step_1(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await get_user(user_id)

    step1_text = t('tutorial_step_1', user.language)

    await callback.message.edit_text(
        text=step1_text,
        reply_markup=get_tutorial_keyboard(1, user.language)
    )
    await state.set_state(TutorialState.STEP_1)
    await callback.answer()

@router.callback_query(F.data == "tutorial_step_2")
async def tutorial_step_2(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await get_user(user_id)

    step2_text = t('tutorial_step_2', user.language)

    await callback.message.edit_text(
        text=step2_text,
        reply_markup=get_tutorial_keyboard(2, user.language)
    )
    await state.set_state(TutorialState.STEP_2)
    await callback.answer()

@router.callback_query(F.data == "tutorial_step_3")
async def tutorial_step_3(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await get_user(user_id)

    step3_text = t('tutorial_step_3', user.language)

    await callback.message.edit_text(
        text=step3_text,
        reply_markup=get_tutorial_keyboard(3, user.language)
    )
    await state.set_state(TutorialState.STEP_3)
    await callback.answer()

@router.callback_query(F.data == "tutorial_complete")
async def tutorial_complete_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await get_user(user_id)

    await complete_tutorial(user_id)

    complete_text = t('tutorial_complete', user.language)
    await callback.message.edit_text(text=complete_text)

    entering_text = t('entering_island', user.language,
        level=user.level,
        energy=120,  # –° –±–æ–Ω—É—Å–æ–º
        ryabucks=1500,  # –° –±–æ–Ω—É—Å–æ–º
        rbtc=f"{user.rbtc:.2f}"
    )

    await callback.message.answer(
        text=entering_text,
        reply_markup=get_island_menu(user.language)
    )

    await state.set_state(MenuState.ON_ISLAND)
    await callback.answer()

@router.callback_query(F.data == "tutorial_skip")
async def tutorial_skip(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await get_user(user_id)

    await complete_tutorial(user_id)

    entering_text = t('entering_island', user.language,
        level=user.level,
        energy=user.energy,
        ryabucks=user.ryabucks,
        rbtc=f"{user.rbtc:.2f}"
    )

    await callback.message.edit_text(text="–¢—É—Ç–æ—Ä–∏–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω!")
    await callback.message.answer(
        text=entering_text,
        reply_markup=get_island_menu(user.language)
    )

    await state.set_state(MenuState.ON_ISLAND)
    await callback.answer()

@router.message(F.text.in_(["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üåç –Ø–∑—ã–∫"]))
async def start_menu_buttons(message: Message, state: FSMContext):
    button_text = message.text

    if button_text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await message.answer("üöß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    elif button_text == "üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer("üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support_username")
    elif button_text == "üåç –Ø–∑—ã–∫":
        await message.answer("üöß –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
