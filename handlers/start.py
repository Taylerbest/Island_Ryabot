"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è Ryabot Island v2.0
–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Supabase –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.message_helper import send_formatted
from database.models import (
    get_user, create_user, update_user_language,
    clear_user_state, complete_tutorial, get_island_stats
)
from keyboards.main_menu import get_start_menu, get_island_menu, get_tutorial_keyboard
from utils.texts import get_text, t
from utils.states import MenuState, TutorialState
import logging

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–≤—ã–π –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    user_id = message.from_user.id
    username = message.from_user.username

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user(user_id)

        if not user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
            await handle_new_user(message, state)
            return

        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await clear_user_state(user_id)
        await send_main_menu(message, user, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


async def handle_new_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        # [InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_en")],  # –î–ª—è –±—É–¥—É—â–µ–≥–æ
    ])

    welcome_text = t("choose_language", "ru")
    await send_formatted(message, welcome_text, reply_markup=keyboard)
    await state.set_state(MenuState.OUTSIDE_ISLAND)


async def send_main_menu(message: Message, user, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ—Å—Ç—Ä–æ–≤–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Å—Ç—Ä–æ–≤–∞
        stats = await get_island_stats()

        welcome_text = await get_text(
            'welcome_to_game', user.user_id,
            online_players=stats.get('online_players', 12),
            daily_rbtc=f"{stats.get('daily_rbtc', 15.67):.2f}",
            active_expeditions=stats.get('active_expeditions', 8)
        )

        keyboard = get_start_menu(user.language)
        await send_formatted(message, welcome_text, reply_markup=keyboard)
        await state.set_state(MenuState.OUTSIDE_ISLAND)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
        # Fallback –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        welcome_text = t('welcome_to_game', user.language,
                         online_players=12, daily_rbtc="15.67", active_expeditions=8)
        keyboard = get_start_menu(user.language)
        await send_formatted(message, welcome_text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("lang_"))
async def language_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        await callback.answer()

        user_id = callback.from_user.id
        username = callback.from_user.username
        language = callback.data.split("_")[1]

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await create_user(user_id, username)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
        await update_user_language(user_id, language)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        confirmation_text = t("language_selected", language)
        await callback.message.edit_text(confirmation_text)

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        import asyncio
        await asyncio.sleep(1)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
        user.language = language
        await send_main_menu(callback.message, user, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")


@router.message(F.text == "üèùÔ∏è –í–æ–π—Ç–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤")
async def enter_island(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤"""
    try:
        user_id = message.from_user.id
        user = await get_user(user_id)

        if not user:
            await start_handler(message, state)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª
        if not user.tutorial_completed:
            await start_tutorial(message, user, state)
            return

        # –í—Ö–æ–¥–∏–º –Ω–∞ –æ—Å—Ç—Ä–æ–≤
        entering_text = await get_text('entering_island', user_id,
                                       level=user.level,
                                       energy=user.energy,
                                       ryabucks=user.ryabucks,
                                       rbtc=f"{user.rbtc:.2f}")

        await send_formatted(
            message,
            entering_text,
            reply_markup=get_island_menu(user.language)
        )
        await state.set_state(MenuState.ON_ISLAND)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def start_tutorial(message: Message, user, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
    try:
        tutorial_text = await get_text('tutorial_welcome', user.user_id)

        await send_formatted(
            message,
            tutorial_text,
            reply_markup=get_tutorial_keyboard(0, user.language)
        )
        await state.set_state(TutorialState.STEP_1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await complete_tutorial(user.user_id)
        await enter_island(message, state)


@router.callback_query(F.data == "tutorial_start")
async def tutorial_step_1(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–≤—ã–π —à–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    try:
        await callback.answer()

        user_id = callback.from_user.id
        user = await get_user(user_id)

        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        step1_text = await get_text('tutorial_step_1', user_id)

        await send_formatted(
            callback,
            step1_text,
            reply_markup=get_tutorial_keyboard(1, user.language),
            edit=True
        )
        await state.set_state(TutorialState.STEP_1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ tutorial_step_1 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ...")
        await tutorial_complete_handler(callback, state)


@router.callback_query(F.data == "tutorial_step_2")
async def tutorial_step_2(callback: CallbackQuery, state: FSMContext):
    """–í—Ç–æ—Ä–æ–π —à–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    try:
        await callback.answer()

        user_id = callback.from_user.id
        user = await get_user(user_id)

        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        step2_text = await get_text('tutorial_step_2', user_id)

        await send_formatted(
            callback,
            step2_text,
            reply_markup=get_tutorial_keyboard(2, user.language),
            edit=True
        )
        await state.set_state(TutorialState.STEP_2)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ tutorial_step_2 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ...")
        await tutorial_complete_handler(callback, state)


@router.callback_query(F.data == "tutorial_step_3")
async def tutorial_step_3(callback: CallbackQuery, state: FSMContext):
    """–¢—Ä–µ—Ç–∏–π —à–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    try:
        await callback.answer()

        user_id = callback.from_user.id
        user = await get_user(user_id)

        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        step3_text = await get_text('tutorial_step_3', user_id)

        await send_formatted(
            callback,
            step3_text,
            reply_markup=get_tutorial_keyboard(3, user.language),
            edit=True
        )
        await state.set_state(TutorialState.STEP_3)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ tutorial_step_3 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ...")
        await tutorial_complete_handler(callback, state)


@router.callback_query(F.data == "tutorial_complete")
async def tutorial_complete_handler(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    try:
        user_id = callback.from_user.id

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª (–¥–∞–µ—Ç –±–æ–Ω—É—Å—ã)
        await complete_tutorial(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user(user_id)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        complete_text = await get_text('tutorial_complete', user_id)
        await callback.message.edit_text(complete_text)

        # –ü–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
        import asyncio
        await asyncio.sleep(2)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –æ—Å—Ç—Ä–æ–≤
        entering_text = await get_text('entering_island', user_id,
                                       level=user.level,
                                       energy=user.energy,
                                       ryabucks=user.ryabucks,
                                       rbtc=f"{user.rbtc:.2f}")

        await send_formatted(
            callback,
            entering_text,
            reply_markup=get_island_menu(user.language)
        )
        await state.set_state(MenuState.ON_ISLAND)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚úÖ –¢—É—Ç–æ—Ä–∏–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤!")


@router.callback_query(F.data == "tutorial_skip")
async def tutorial_skip(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    try:
        await callback.answer("‚ö° –¢—É—Ç–æ—Ä–∏–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω!")

        user_id = callback.from_user.id
        await complete_tutorial(user_id)

        user = await get_user(user_id)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞")
            return

        entering_text = await get_text('entering_island', user_id,
                                       level=user.level,
                                       energy=user.energy,
                                       ryabucks=user.ryabucks,
                                       rbtc=f"{user.rbtc:.2f}")

        await callback.message.edit_text("‚ö° –¢—É—Ç–æ—Ä–∏–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç—Ä–æ–≤–æ–º
        await send_formatted(
            callback.message,
            entering_text,
            reply_markup=get_island_menu(user.language)
        )

        await state.set_state(MenuState.ON_ISLAND)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚ö° –¢—É—Ç–æ—Ä–∏–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤!")


@router.message(F.text.in_(["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üåç –Ø–∑—ã–∫"]))
async def start_menu_buttons(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é"""
    try:
        button_text = message.text

        if button_text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            settings_text = """‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ üåç –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ (—Å–∫–æ—Ä–æ)
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å–∫–æ—Ä–æ)
‚Ä¢ üé® –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (—Å–∫–æ—Ä–æ)

üì± –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
            await message.answer(settings_text, parse_mode="Markdown")

        elif button_text == "üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            support_text = """üì± **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**

üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?

üìß –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:
‚Ä¢ Telegram: @support_ryabot
‚Ä¢ Email: support@ryabotisland.com

üêõ –ù–∞—à–ª–∏ –±–∞–≥?
‚Ä¢ GitHub: /report_bug

‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 24 —á–∞—Å–æ–≤"""
            await message.answer(support_text, parse_mode="Markdown")

        elif button_text == "üåç –Ø–∑—ã–∫":
            language_text = """üåç **–Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**

üó£Ô∏è –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π

üîÑ –°–º–µ–Ω–∞ —è–∑—ã–∫–∞:
–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–º–µ–Ω–∞ –Ω–∞:
‚Ä¢ üá∫üá∏ English
‚Ä¢ üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
‚Ä¢ üá∞üáø “ö–∞–∑–∞“õ—à–∞

üìù –•–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"""
            await message.answer(language_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é {message.text}: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """üÜò **–ü–æ–º–æ—â—å –ø–æ Ryabot Island**

üéÆ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/menu - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/economy - –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
/claim - –°–æ–±—Ä–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é
/gather - –°–æ–±—Ä–∞—Ç—å –≤—Å–µ (Premium)

üèùÔ∏è **–†–∞–∑–¥–µ–ª—ã –∏–≥—Ä—ã:**
üè† –§–µ—Ä–º–∞ - –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
üè¢ –ì–æ—Ä–æ–¥ - –ó–¥–∞–Ω–∏—è –∏ —É—Å–ª—É–≥–∏  
üë§ –ñ–∏—Ç–µ–ª—å - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
üíº –†–∞–±–æ—Ç–∞ - –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–µ–Ω–µ–≥
üéí –†—é–∫–∑–∞–∫ - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
üë• –î—Ä—É–∑—å—è - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
üèÜ –õ–∏–¥–µ—Ä—ã - –†–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤

üì± –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? @support_ryabot"""

    await message.answer(help_text, parse_mode="Markdown")


@router.message(Command("menu"))
async def menu_command(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = await get_user(message.from_user.id)
    if user:
        await clear_user_state(user.user_id)
        await send_main_menu(message, user, state)
    else:
        await start_handler(message, state)


logger.info("‚úÖ Start handler –∑–∞–≥—Ä—É–∂–µ–Ω (Supabase –≤–µ—Ä—Å–∏—è)")
