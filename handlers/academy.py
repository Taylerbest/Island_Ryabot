"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ê–∫–∞–¥–µ–º–∏–∏ - –Ω–∞–π–º –∏ –æ–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.models import (
    get_user, hire_worker, can_hire_worker, get_hired_workers_count,
    start_training, get_active_trainings, complete_trainings,
    get_training_slots_info, get_specialists_count, create_academy_tables
)
from keyboards.academy import (
    get_academy_menu, get_labor_exchange_menu,
    get_profession_selection_menu, get_training_class_menu
)
from utils.texts import t

router = Router()


@router.callback_query(F.data == "academy")
async def academy_main(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ê–∫–∞–¥–µ–º–∏–∏"""
    user_id = callback.from_user.id
    user = await get_user(user_id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
    await create_academy_tables()

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è
    completed_count = await complete_trainings(user_id)
    if completed_count > 0:
        await callback.answer(f"üéì –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ã–ø—É—Å—Ç–∏–ª–æ—Å—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {completed_count}", show_alert=True)

    workers_count = await get_hired_workers_count(user_id)
    specialists_count = await get_specialists_count(user_id)
    active_trainings = await get_active_trainings(user_id)

    academy_text = t('academy_welcome', user.language,
        laborers=workers_count.get('laborer', 0),
        training=len(active_trainings),
        specialists=sum(specialists_count.values())
    )

    await callback.message.edit_text(
        text=academy_text,
        reply_markup=get_academy_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "labor_exchange")
async def labor_exchange(callback: CallbackQuery):
    """–ë–∏—Ä–∂–∞ —Ç—Ä—É–¥–∞ - –Ω–∞–π–º —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏—Ö"""
    user_id = callback.from_user.id
    user = await get_user(user_id)

    can_hire, reason, remaining = await can_hire_worker(user_id)
    workers_count = await get_hired_workers_count(user_id)

    # –°—Ç–∞—Ç—É—Å –Ω–∞–π–º–∞
    if can_hire:
        status = t('hire_status_ready', user.language)
    elif reason == "cooldown":
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        status = t('hire_status_cooldown', user.language, hours=hours, minutes=minutes)
    else:
        status = t('hire_status_limit', user.language)

    exchange_text = t('labor_exchange', user.language,
        laborers=workers_count.get('laborer', 0),
        status=status
    )

    await callback.message.edit_text(
        text=exchange_text,
        reply_markup=get_labor_exchange_menu(can_hire, workers_count.get('laborer', 0)),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("hire_slot_"))
async def hire_slot(callback: CallbackQuery):
    """–ù–∞–Ω—è—Ç—å —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–µ–≥–æ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    user_id = callback.from_user.id
    slot_type = callback.data.split("_")[2]  # free, business, quantum

    # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    # if slot_type == "business" and not user.has_business_license:
    #     await callback.answer("‚ùå –ù—É–∂–Ω–∞ –±–∏–∑–Ω–µ—Å-–ª–∏—Ü–µ–Ω–∑–∏—è!", show_alert=True)
    #     return

    success, message = await hire_worker(user_id)

    await callback.answer(message, show_alert=True)

    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await labor_exchange(callback)


@router.callback_query(F.data == "info_free_slots")
async def info_free_slots(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö"""
    user = await get_user(callback.from_user.id)
    info_text = t('info_free_slots', user.language)
    await callback.answer(info_text, show_alert=True)


@router.callback_query(F.data == "info_business_slots")
async def info_business_slots(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–∞—Ö –±–∏–∑–Ω–µ—Å-–ª–∏—Ü–µ–Ω–∑–∏–∏"""
    user = await get_user(callback.from_user.id)
    info_text = t('info_business_slots', user.language)
    await callback.answer(info_text, show_alert=True)


@router.callback_query(F.data == "info_quantum_slots")
async def info_quantum_slots(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–∞—Ö Quantum-Pass"""
    user = await get_user(callback.from_user.id)
    info_text = t('info_quantum_slots', user.language)
    await callback.answer(info_text, show_alert=True)


@router.callback_query(F.data == "expert_courses")
async def expert_courses(callback: CallbackQuery):
    """–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫—É—Ä—Å—ã - –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    user_id = callback.from_user.id
    user = await get_user(user_id)

    workers_count = await get_hired_workers_count(user_id)
    slots_info = await get_training_slots_info(user_id)

    courses_text = t('expert_courses', user.language,
        laborers=workers_count.get('laborer', 0),
        slots_used=slots_info['used'],
        slots_total=slots_info['total']
    )

    await callback.message.edit_text(
        text=courses_text,
        reply_markup=get_profession_selection_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("train_"))
async def train_profession(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    user_id = callback.from_user.id
    profession = callback.data.split("_")[1]

    success, message = await start_training(user_id, profession)

    await callback.answer(message, show_alert=True)

    if success:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        await expert_courses(callback)


@router.callback_query(F.data == "training_class")
async def training_class(callback: CallbackQuery):
    """–£—á–µ–±–Ω—ã–π –∫–ª–∞—Å—Å - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—É—á–∞—é—â–∏—Ö—Å—è"""
    user_id = callback.from_user.id
    user = await get_user(user_id)

    active_trainings = await get_active_trainings(user_id)
    slots_info = await get_training_slots_info(user_id)

    if not active_trainings:
        class_text = t('training_class_empty', user.language)
    else:
        profession_icons = {
            'builder': 'üë∑', 'farmer': 'üë®‚Äçüåæ', 'woodman': 'üßë‚Äçüöí',
            'soldier': 'üíÇ', 'fisherman': 'üé£', 'scientist': 'üë®‚Äçüî¨',
            'cook': 'üë®‚Äçüç≥', 'teacher': 'üë®‚Äçüè´', 'doctor': 'üßë‚Äç‚öïÔ∏è'
        }

        profession_names = {
            'builder': '–°—Ç—Ä–æ–∏—Ç–µ–ª—å', 'farmer': '–§–µ—Ä–º–µ—Ä', 'woodman': '–õ–µ—Å–Ω–∏–∫',
            'soldier': '–°–æ–ª–¥–∞—Ç', 'fisherman': '–†—ã–±–∞–∫', 'scientist': '–£—á–µ–Ω—ã–π',
            'cook': '–ü–æ–≤–∞—Ä', 'teacher': '–£—á–∏—Ç–µ–ª—å', 'doctor': '–î–æ–∫—Ç–æ—Ä'
        }

        training_list = ""
        for i, training in enumerate(active_trainings, 1):
            icon = profession_icons.get(training['type'], 'üë§')
            name = profession_names.get(training['type'], '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')
            training_list += f"{i}. {icon} {name} - ‚è∞ {training['time_left']}\n"

        class_text = t('training_class_active', user.language,
            slots_used=slots_info['used'],
            slots_total=slots_info['total'],
            training_list=training_list.strip()
        )

    await callback.message.edit_text(
        text=class_text,
        reply_markup=get_training_class_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_academy")
async def back_to_academy(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ê–∫–∞–¥–µ–º–∏–∏"""
    await academy_main(callback, state)


@router.callback_query(F.data == "skip_hire_cooldown")
async def skip_hire_cooldown(callback: CallbackQuery):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫—É–ª–¥–∞—É–Ω –Ω–∞–π–º–∞ –∑–∞ RBTC"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ –∑–∞ RBTC
    await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)


@router.callback_query(F.data == "boost_training")
async def boost_training(callback: CallbackQuery):
    """–£—Å–∫–æ—Ä–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞ RBTC"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
    await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)


@router.callback_query(F.data == "info_header")
async def info_header(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    await callback.answer()


@router.callback_query(F.data.startswith("slot_header_"))
async def slot_header(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–ª–æ—Ç–æ–≤"""
    await callback.answer()


@router.callback_query(F.data.startswith("cooldown_"))
async def cooldown_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ"""
    user = await get_user(callback.from_user.id)
    await callback.answer(t('cooldown_slot', user.language), show_alert=True)
