"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ê–∫–∞–¥–µ–º–∏–∏ - –Ω–∞–π–º –∏ –æ–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.models import (
    get_user, hire_worker, can_hire_worker, get_hired_workers_count,
    start_training, get_active_trainings, complete_trainings,
    get_training_slots_info, get_specialists_count, create_academy_tables
)
from keyboards.academy import (
    get_academy_menu, get_labor_exchange_menu, get_training_menu,
    get_profession_selection_menu, get_training_class_menu
)

router = Router()


@router.callback_query(F.data == "academy")
async def academy_main(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ê–∫–∞–¥–µ–º–∏–∏"""
    user_id = callback.from_user.id
    user = await get_user(user_id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
    await create_academy_tables()

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è
    completed_count = await complete_trainings(user_id)
    if completed_count > 0:
        await callback.answer(f"üéì –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ã–ø—É—Å—Ç–∏–ª–æ—Å—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {completed_count}", show_alert=True)

    workers_count = await get_hired_workers_count(user_id)
    specialists_count = await get_specialists_count(user_id)
    active_trainings = await get_active_trainings(user_id)

    academy_text = (
        "üè´ <b>–ê–í–ò–ê–ù–°–ö–ê–Ø –ê–ö–ê–î–ï–ú–ò–Ø</b>\n\n"
        "üìú <i>\"–®–µ–ø—á—É—â–∏–µ –∑–∞–ª—ã, –≥–¥–µ –º–æ–∑–æ–ª–∏—Å—Ç—ã–µ —Ä—É–∫–∏ —É—á–∞—Ç—Å—è –∑–∞–±—ã—Ç—ã–º —Ä–µ–º–µ—Å–ª–∞–º. "
        "–ó–¥–µ—Å—å, —É—Å—Ç–∞–ª—ã–µ —Ä–∞–±–æ—Ç—è–≥–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫–∞–º–∏ ‚Äî –∏—Ö –ø–æ—Ç "
        "–æ–±–º–µ–Ω–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –∫–∞–º–µ–Ω—â–∏–∫–æ–≤, –∏–Ω—Ç—É–∏—Ü–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–≤, "
        "—Ç–µ—Ä–ø–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –º–æ—Å—Ç–æ–≤. –î–æ—Å–∫–∏ –≥—É–¥—è—Ç —É—Ä–∞–≤–Ω–µ–Ω–∏—è–º–∏, –º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ "
        "–ø–∞—Ö–Ω—É—Ç —Å–æ—Å–Ω–æ–≤–æ–π —Å–º–æ–ª–æ–π –∏ –∞–º–±–∏—Ü–∏—è–º–∏.\"</i>\n\n"
        f"üôç‚Äç‚ôÇÔ∏è <b>–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏—Ö:</b> {workers_count.get('laborer', 0)}\n"
        f"üìö <b>–û–±—É—á–∞–µ—Ç—Å—è:</b> {len(active_trainings)}\n"
        f"üéì <b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:</b> {sum(specialists_count.values())}\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await callback.message.edit_text(
        text=academy_text,
        reply_markup=get_academy_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "labor_exchange")
async def labor_exchange(callback: CallbackQuery):
    """–ë–∏—Ä–∂–∞ —Ç—Ä—É–¥–∞ - –Ω–∞–π–º —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏—Ö"""
    user_id = callback.from_user.id
    user = await get_user(user_id)

    can_hire, reason, remaining = await can_hire_worker(user_id)
    workers_count = await get_hired_workers_count(user_id)
    total_workers = sum(workers_count.values())

    # –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–π–º–∞ (–ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã)
    hire_cost_percent = 30 + (total_workers * 5)

    # –°—Ç–∞—Ç—É—Å –Ω–∞–π–º–∞
    if can_hire:
        status = "‚úÖ –ú–æ–∂–Ω–æ –Ω–∞–Ω—è—Ç—å —Ä–∞–±–æ—á–µ–≥–æ"
    elif reason == "cooldown":
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        status = f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –Ω–∞–π–º —á–µ—Ä–µ–∑: {hours}—á {minutes}–º–∏–Ω"
    else:
        status = "üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç"

    exchange_text = (
        "üõ†Ô∏è <b>–ë–ò–†–ñ–ê –¢–†–£–î–ê</b>\n\n"
        "üíº <i>\"–ò—â–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å—Ä–µ–¥–∏ –æ—Å—Ç—Ä–æ–≤–∏—Ç—è–Ω ‚Äî –Ω–æ –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å, "
        "—Ö–æ—Ä–æ—à–∏–µ –¥–æ–ª–≥–æ –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!\"</i>\n\n"
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–π–º–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è "
        f"–Ω–∞ 5üíµ –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ.\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞ –Ω–∞–π–º–∞:</b> (30 + %w_team%) üíµ\n"
        f"üôç‚Äç‚ôÇÔ∏è <b>–£ –≤–∞—Å —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏—Ö:</b> {workers_count.get('laborer', 0)}\n\n"
        f"üîÑ {status}\n\n"
        "üí° –ü–æ—Å–ª–µ –Ω–∞–π–º–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ "
        "(–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞ üí†RBTC)."
    )

    await callback.message.edit_text(
        text=exchange_text,
        reply_markup=get_labor_exchange_menu(can_hire, workers_count.get('laborer', 0)),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("hire_slot_"))
async def hire_slot(callback: CallbackQuery):
    """–ù–∞–Ω—è—Ç—å —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–µ–≥–æ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    user_id = callback.from_user.id
    slot_type = callback.data.split("_")[2]  # free, business, quantum

    # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    # if slot_type == "business" and not user.has_business_license:
    #     await callback.answer("‚ùå –ù—É–∂–Ω–∞ –±–∏–∑–Ω–µ—Å-–ª–∏—Ü–µ–Ω–∑–∏—è!", show_alert=True)
    #     return

    success, message = await hire_worker(user_id)

    await callback.answer(message, show_alert=True)

    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await labor_exchange(callback)


@router.callback_query(F.data == "info_free_slots")
async def info_free_slots(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö"""
    info_text = (
        "üÜì <b>–ë–ï–°–ü–õ–ê–¢–ù–´–ï –°–õ–û–¢–´</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.\n\n"
        "üìä <b>–õ–∏–º–∏—Ç:</b> 3 —Ä–∞–±–æ—á–∏—Ö\n"
        "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> (30 + %w_team%) üíµ\n"
        "‚è∞ <b>Cooldown:</b> 24 —á–∞—Å–∞ –º–µ–∂–¥—É –Ω–∞–π–º–æ–º"
    )
    await callback.answer(info_text, show_alert=True)


@router.callback_query(F.data == "info_business_slots")
async def info_business_slots(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–∞—Ö –±–∏–∑–Ω–µ—Å-–ª–∏—Ü–µ–Ω–∑–∏–∏"""
    info_text = (
        "üìú <b>–°–õ–û–¢–´ –ë–ò–ó–ù–ï–°-–õ–ò–¶–ï–ù–ó–ò–ò</b>\n\n"
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–∏—Ü–µ–Ω–∑–∏—è.\n\n"
        "üìä <b>–õ–∏–º–∏—Ç:</b> +3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö\n"
        "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> (30 + %w_team%) üíµ\n"
        "‚è∞ <b>Cooldown:</b> 24 —á–∞—Å–∞ –º–µ–∂–¥—É –Ω–∞–π–º–æ–º\n\n"
        "üîë –ö—É–ø–∏—Ç–µ –±–∏–∑–Ω–µ—Å-–ª–∏—Ü–µ–Ω–∑–∏—é –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!"
    )
    await callback.answer(info_text, show_alert=True)


@router.callback_query(F.data == "info_quantum_slots")
async def info_quantum_slots(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–∞—Ö Quantum-Pass"""
    info_text = (
        "ü™™ <b>–°–õ–û–¢–´ QUANTUM-PASS</b>\n\n"
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π Quantum-Pass.\n\n"
        "üìä <b>–õ–∏–º–∏—Ç:</b> +3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö\n"
        "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> (30 + %w_team%) üíµ\n"
        "‚è∞ <b>Cooldown:</b> 24 —á–∞—Å–∞ –º–µ–∂–¥—É –Ω–∞–π–º–æ–º\n\n"
        "‚ú® –ö—É–ø–∏—Ç–µ Quantum-Pass –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!"
    )
    await callback.answer(info_text, show_alert=True)


@router.callback_query(F.data == "expert_courses")
async def expert_courses(callback: CallbackQuery):
    """–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫—É—Ä—Å—ã - –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    user_id = callback.from_user.id

    workers_count = await get_hired_workers_count(user_id)
    slots_info = await get_training_slots_info(user_id)

    courses_text = (
        "üéì <b>–≠–ö–°–ü–ï–†–¢–ù–´–ï –ö–£–†–°–´</b>\n\n"
        "üìö <i>\"–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã—Ö —Ä–∞–±–æ—Ç—è–≥ –≤ –æ–ø—ã—Ç–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ "
        "—Å—É—Ä–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –ê–≤–∏–∞–Ω—Å–∫–æ–π –ê–∫–∞–¥–µ–º–∏–∏. –ö–∞–∂–¥—ã–π –∫—É—Ä—Å —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏, "
        "—Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —â–µ–ø–æ—Ç–∫—É –∫–≤–∞–Ω—Ç–æ–≤–æ–π —É–¥–∞—á–∏.\"</i>\n\n"
        f"üôç‚Äç‚ôÇÔ∏è <b>–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏—Ö –¥–æ—Å—Ç—É–ø–Ω–æ:</b> {workers_count.get('laborer', 0)}\n"
        f"üìñ <b>–£—á–µ–±–Ω—ã—Ö –º–µ—Å—Ç:</b> {slots_info['used']}/{slots_info['total']}\n\n"
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:</b>"
    )

    await callback.message.edit_text(
        text=courses_text,
        reply_markup=get_profession_selection_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("train_"))
async def train_profession(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    user_id = callback.from_user.id
    profession = callback.data.split("_")[1]

    success, message = await start_training(user_id, profession)

    await callback.answer(message, show_alert=True)

    if success:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        await expert_courses(callback)


@router.callback_query(F.data == "training_class")
async def training_class(callback: CallbackQuery):
    """–£—á–µ–±–Ω—ã–π –∫–ª–∞—Å—Å - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—É—á–∞—é—â–∏—Ö—Å—è"""
    user_id = callback.from_user.id

    active_trainings = await get_active_trainings(user_id)
    slots_info = await get_training_slots_info(user_id)

    if not active_trainings:
        class_text = (
            "üè´ <b>–£–ß–ï–ë–ù–´–ô –ö–õ–ê–°–°</b>\n\n"
            "üìù –°–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –æ–±—É—á–∞–µ—Ç—Å—è.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏—Ö –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫—É—Ä—Å—ã!"
        )
    else:
        class_text = (
            "üè´ <b>–£–ß–ï–ë–ù–´–ô –ö–õ–ê–°–°</b>\n\n"
            f"üìñ <b>–ó–∞–Ω—è—Ç–æ –º–µ—Å—Ç:</b> {slots_info['used']}/{slots_info['total']}\n\n"
            "üë®‚Äçüéì <b>–û–±—É—á–∞—é—Ç—Å—è:</b>\n"
        )

        profession_icons = {
            'builder': 'üë∑', 'farmer': 'üë®‚Äçüåæ', 'woodman': 'üßë‚Äçüöí',
            'soldier': 'üíÇ', 'fisherman': 'üé£', 'scientist': 'üë®‚Äçüî¨',
            'cook': 'üë®‚Äçüç≥', 'teacher': 'üë®‚Äçüè´', 'doctor': 'üßë‚Äç‚öïÔ∏è'
        }

        profession_names = {
            'builder': '–°—Ç—Ä–æ–∏—Ç–µ–ª—å', 'farmer': '–§–µ—Ä–º–µ—Ä', 'woodman': '–õ–µ—Å–Ω–∏–∫',
            'soldier': '–°–æ–ª–¥–∞—Ç', 'fisherman': '–†—ã–±–∞–∫', 'scientist': '–£—á–µ–Ω—ã–π',
            'cook': '–ü–æ–≤–∞—Ä', 'teacher': '–£—á–∏—Ç–µ–ª—å', 'doctor': '–î–æ–∫—Ç–æ—Ä'
        }

        for i, training in enumerate(active_trainings, 1):
            icon = profession_icons.get(training['type'], 'üë§')
            name = profession_names.get(training['type'], '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')
            class_text += f"{i}. {icon} {name} - ‚è∞ {training['time_left']}\n"

        class_text += "\nüí° –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"

    await callback.message.edit_text(
        text=class_text,
        reply_markup=get_training_class_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_academy")
async def back_to_academy(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ê–∫–∞–¥–µ–º–∏–∏"""
    await academy_main(callback, state)


@router.callback_query(F.data == "skip_hire_cooldown")
async def skip_hire_cooldown(callback: CallbackQuery):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫—É–ª–¥–∞—É–Ω –Ω–∞–π–º–∞ –∑–∞ RBTC"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ –∑–∞ RBTC
    await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)


@router.callback_query(F.data == "boost_training")
async def boost_training(callback: CallbackQuery):
    """–£—Å–∫–æ—Ä–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞ RBTC"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
    await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)


@router.callback_query(F.data == "info_header")
async def info_header(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    await callback.answer()


@router.callback_query(F.data.startswith("slot_header_"))
async def slot_header(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–ª–æ—Ç–æ–≤"""
    await callback.answer()


@router.callback_query(F.data.startswith("cooldown_"))
async def cooldown_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ"""
    await callback.answer("‚è≥ –≠—Ç–æ—Ç —Å–ª–æ—Ç –Ω–∞ 24-—á–∞—Å–æ–≤–æ–º –∫—É–ª–¥–∞—É–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Boost –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞!", show_alert=True)
