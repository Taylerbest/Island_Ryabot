"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ê–∫–∞–¥–µ–º–∏–∏ –¥–ª—è Ryabot Island v2.0
–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Supabase –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery
from utils.message_helper import send_formatted
from database.models import (
    get_user, hire_worker, can_hire_worker,
    get_hired_workers_count, start_training,
    get_active_trainings, complete_trainings,
    get_training_slots_info, get_specialists_count
)
from keyboards.academy import (
    get_academy_menu, get_labor_exchange_menu,
    get_profession_selection_menu, get_training_class_menu
)
from utils.texts import get_text, t
from config import config
import logging

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "academy")
async def academy_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ê–∫–∞–¥–µ–º–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –æ–±—É—á–µ–Ω–∏–π"""
    try:
        await callback.answer()

        user_id = callback.from_user.id
        user = await get_user(user_id)

        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è
        completed_count = await complete_trainings(user_id)
        if completed_count > 0:
            try:
                completion_message = await get_text(
                    'training_completed_alert', user_id,
                    count=completed_count
                )
                await callback.answer(completion_message, show_alert=True)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")
                await callback.answer(f"üéì –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ã–ø—É—Å—Ç–∏–ª–æ—Å—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {completed_count}",
                                      show_alert=True)

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        workers_count = await get_hired_workers_count(user_id)
        specialists_count = await get_specialists_count(user_id)
        active_trainings = await get_active_trainings(user_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫–∞–¥–µ–º–∏–∏
        academy_text = await get_text(
            "academy_welcome", user_id,
            laborers=workers_count.get("laborer", 0),
            training=len(active_trainings),
            specialists=sum(specialists_count.values())
        )

        await send_formatted(
            callback,
            academy_text,
            reply_markup=get_academy_menu(),
            edit=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ academy_main –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ê–∫–∞–¥–µ–º–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "labor_exchange")
async def labor_exchange(callback: CallbackQuery):
    """–ë–∏—Ä–∂–∞ —Ç—Ä—É–¥–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–º–µ"""
    try:
        await callback.answer()

        user_id = callback.from_user.id
        user = await get_user(user_id)

        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π–º–∞
        can_hire, reason, remaining = await can_hire_worker(user_id)
        workers_count = await get_hired_workers_count(user_id)
        total_workers = sum(workers_count.values())

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–π–º–∞
        if can_hire:
            hire_cost = config.game.get_hire_cost(total_workers)
            status = await get_text("hire_status_ready", user_id, cost=hire_cost)
        elif reason == "cooldown":
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            status = await get_text("hire_status_cooldown", user_id, hours=hours, minutes=minutes)
        elif reason == "limit_reached":
            status = await get_text("hire_status_limit", user_id)
        else:
            status = await get_text("hire_status_unknown", user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∏—Ä–∂–∏ —Ç—Ä—É–¥–∞
        exchange_text = await get_text(
            "labor_exchange", user_id,
            laborers=workers_count.get("laborer", 0),
            status=status,
            total_workers=total_workers
        )

        await send_formatted(
            callback,
            exchange_text,
            reply_markup=get_labor_exchange_menu(can_hire, total_workers),
            edit=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ labor_exchange –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∏—Ä–∂–∏ —Ç—Ä—É–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("hire_slot_"))
async def hire_slot(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
    try:
        user_id = callback.from_user.id
        slot_data = callback.data.split("_")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ
        if len(slot_data) >= 3:
            slot_type = slot_data[2]  # free, business, quantum
            slot_index = slot_data[3] if len(slot_data) > 3 else "0"
        else:
            slot_type = "free"
            slot_index = "0"

        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}, —Å–ª–æ—Ç {slot_type}_{slot_index}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–π–º
        success, message = await hire_worker(user_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.answer(message, show_alert=True)

        # –ï—Å–ª–∏ –Ω–∞–π–º —É—Å–ø–µ—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if success:
            # –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
            import asyncio
            await asyncio.sleep(0.1)
            await labor_exchange(callback)
        else:
            # –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –º–µ–Ω—è–µ–º
            logger.warning(f"–ù–µ—É–¥–∞—á–Ω—ã–π –Ω–∞–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {message}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ hire_slot –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–π–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "expert_courses")
async def expert_courses(callback: CallbackQuery):
    """–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫—É—Ä—Å—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    try:
        await callback.answer()

        user_id = callback.from_user.id
        user = await get_user(user_id)

        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫—É—Ä—Å–æ–≤
        workers_count = await get_hired_workers_count(user_id)
        slots_info = await get_training_slots_info(user_id)

        courses_text = await get_text(
            "expert_courses", user_id,
            laborers=workers_count.get("laborer", 0),
            slots_used=slots_info["used"],
            slots_total=slots_info["total"]
        )

        await send_formatted(
            callback,
            courses_text,
            reply_markup=get_profession_selection_menu(),
            edit=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ expert_courses –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("train_"))
async def train_profession(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    try:
        user_id = callback.from_user.id
        profession = callback.data.split("_")[1]

        logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è {profession} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        success, message = await start_training(user_id, profession)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.answer(message, show_alert=True)

        # –ï—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if success:
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
            import asyncio
            await asyncio.sleep(0.1)
            await expert_courses(callback)
        else:
            logger.warning(f"–ù–µ—É–¥–∞—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ {profession} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ train_profession –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "training_class")
async def training_class(callback: CallbackQuery):
    """–£—á–µ–±–Ω—ã–π –∫–ª–∞—Å—Å —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–±—É—á–µ–Ω–∏—è–º–∏"""
    try:
        await callback.answer()

        user_id = callback.from_user.id
        user = await get_user(user_id)

        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        active_trainings = await get_active_trainings(user_id)
        slots_info = await get_training_slots_info(user_id)

        if not active_trainings:
            class_text = await get_text("training_class_empty", user_id)
        else:
            # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
            profession_icons = {
                "builder": "üë∑", "farmer": "üë®‚Äçüåæ", "woodman": "üßë‚Äçüöí",
                "soldier": "üíÇ", "fisherman": "üé£", "scientist": "üë®‚Äçüî¨",
                "cook": "üë®‚Äçüç≥", "teacher": "üë®‚Äçüè´", "doctor": "üßë‚Äç‚öïÔ∏è"
            }

            profession_names = {
                "builder": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å", "farmer": "–§–µ—Ä–º–µ—Ä", "woodman": "–õ–µ—Å–Ω–∏–∫",
                "soldier": "–°–æ–ª–¥–∞—Ç", "fisherman": "–†—ã–±–∞–∫", "scientist": "–£—á–µ–Ω—ã–π",
                "cook": "–ü–æ–≤–∞—Ä", "teacher": "–£—á–∏—Ç–µ–ª—å", "doctor": "–î–æ–∫—Ç–æ—Ä"
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—É—á–∞—é—â–∏—Ö—Å—è
            training_list = ""
            for i, training in enumerate(active_trainings, 1):
                icon = profession_icons.get(training["type"], "üë§")
                name = profession_names.get(training["type"], "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
                training_list += f"{i}. {icon} {name} - ‚è∞ {training['time_left']}\n"

            class_text = await get_text(
                "training_class_active", user_id,
                slots_used=slots_info["used"],
                slots_total=slots_info["total"],
                training_list=training_list.strip()
            )

        await send_formatted(
            callback,
            class_text,
            reply_markup=get_training_class_menu(),
            edit=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ training_class –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—á–µ–±–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "back_to_academy")
async def back_to_academy(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ê–∫–∞–¥–µ–º–∏–∏"""
    try:
        await callback.answer()
        await academy_main(callback)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ back_to_academy –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ê–∫–∞–¥–µ–º–∏—é", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–¥–ª—è —Å–ª–æ—Ç–æ–≤ –Ω–∞–π–º–∞)
@router.callback_query(F.data.in_(["info_header", "info_free_slots", "info_business_slots", "info_quantum_slots"]))
async def info_handlers(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    try:
        info_key = callback.data.replace("info_", "")

        if info_key == "header":
            message = "üìã –°–ª–æ—Ç—ã –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–∏—Ö"
        elif info_key == "free_slots":
            message = await get_text("info_free_slots", callback.from_user.id)
        elif info_key == "business_slots":
            message = await get_text("info_business_slots", callback.from_user.id)
        elif info_key == "quantum_slots":
            message = await get_text("info_quantum_slots", callback.from_user.id)
        else:
            message = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

        await callback.answer(message, show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ info_handlers –¥–ª—è {callback.data}: {e}")
        await callback.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤ —Å–ª–æ—Ç–æ–≤
@router.callback_query(F.data.startswith("cooldown_"))
async def cooldown_handlers(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å–ª–æ—Ç–∞–º –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ"""
    try:
        message = await get_text("cooldown_slot", callback.from_user.id)
        await callback.answer(message, show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ cooldown_handlers: {e}")
        await callback.answer("‚è≥ –≠—Ç–æ—Ç —Å–ª–æ—Ç –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π
@router.callback_query(F.data.in_(["skip_hire_cooldown", "boost_training"]))
async def premium_handlers(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π (—É—Å–∫–æ—Ä–µ–Ω–∏—è)"""
    try:
        if callback.data == "skip_hire_cooldown":
            message = await get_text("boost_hire_info", callback.from_user.id)
        elif callback.data == "boost_training":
            message = await get_text("boost_training_info", callback.from_user.id)
        else:
            message = "üí† –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è"

        await callback.answer(message, show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ premium_handlers –¥–ª—è {callback.data}: {e}")
        await callback.answer("üí† –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–ª–æ—Ç–æ–≤ (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
@router.callback_query(F.data.startswith("slot_header_"))
async def slot_header_handlers(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö"""
    try:
        slot_num = callback.data.split("_")[-1]
        message = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–µ #{slot_num}"
        await callback.answer(message, show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ slot_header_handlers: {e}")
        await callback.answer("üìã –°–ª–æ—Ç –Ω–∞–π–º–∞", show_alert=True)


logger.info("‚úÖ Academy handler –∑–∞–≥—Ä—É–∂–µ–Ω (Supabase –≤–µ—Ä—Å–∏—è)")
