"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ê–∫–∞–¥–µ–º–∏–∏
"""
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def get_academy_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ê–∫–∞–¥–µ–º–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ†Ô∏è –ë–∏—Ä–∂–∞ –¢—Ä—É–¥–∞", callback_data="labor_exchange")],
        [InlineKeyboardButton(text="üéì –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –ö—É—Ä—Å—ã", callback_data="expert_courses")],
        [InlineKeyboardButton(text="üè´ –£—á–µ–±–Ω—ã–π –ö–ª–∞—Å—Å", callback_data="training_class")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="town")]
    ])
    return keyboard


def get_labor_exchange_menu(can_hire: bool, hired_count: int) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –±–∏—Ä–∂–∏ —Ç—Ä—É–¥–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª–æ—Ç–æ–≤"""
    buttons = []

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
    header_row = [
        InlineKeyboardButton(text="üìã", callback_data="info_header"),  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        InlineKeyboardButton(text="–°–ª–æ—Ç 1", callback_data="slot_header_1"),
        InlineKeyboardButton(text="–°–ª–æ—Ç 2", callback_data="slot_header_2"),
        InlineKeyboardButton(text="–°–ª–æ—Ç 3", callback_data="slot_header_3")
    ]
    buttons.append(header_row)

    # –°—Ç—Ä–æ–∫–∞ 1: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã (3 —à—Ç)
    free_row = [InlineKeyboardButton(text="üÜì", callback_data="info_free_slots")]
    for i in range(3):
        if i < hired_count and hired_count <= 3:
            # –°–ª–æ—Ç –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ
            free_row.append(InlineKeyboardButton(text="‚è≥", callback_data=f"cooldown_free_{i}"))
        else:
            # –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
            free_row.append(InlineKeyboardButton(text="üôç‚Äç‚ôÇÔ∏è", callback_data=f"hire_slot_free_{i}"))
    buttons.append(free_row)

    # –°—Ç—Ä–æ–∫–∞ 2: –°–ª–æ—Ç—ã –±–∏–∑–Ω–µ—Å-–ª–∏—Ü–µ–Ω–∑–∏–∏ (3 —à—Ç)
    business_row = [InlineKeyboardButton(text="üìú", callback_data="info_business_slots")]
    for i in range(3, 6):
        if i < hired_count and 3 < hired_count <= 6:
            business_row.append(InlineKeyboardButton(text="‚è≥", callback_data=f"cooldown_business_{i}"))
        else:
            business_row.append(InlineKeyboardButton(text="üôç‚Äç‚ôÇÔ∏è", callback_data=f"hire_slot_business_{i}"))
    buttons.append(business_row)

    # –°—Ç—Ä–æ–∫–∞ 3: –°–ª–æ—Ç—ã Quantum-Pass (3 —à—Ç)
    quantum_row = [InlineKeyboardButton(text="ü™™", callback_data="info_quantum_slots")]
    for i in range(6, 9):
        if i < hired_count and hired_count > 6:
            quantum_row.append(InlineKeyboardButton(text="‚è≥", callback_data=f"cooldown_quantum_{i}"))
        else:
            quantum_row.append(InlineKeyboardButton(text="üôç‚Äç‚ôÇÔ∏è", callback_data=f"hire_slot_quantum_{i}"))
    buttons.append(quantum_row)

    # –ö–Ω–æ–ø–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏ –Ω–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(text="üí† Boost", callback_data="skip_hire_cooldown")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_academy")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_profession_selection_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (3x3 —Å–µ—Ç–∫–∞)"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        # –†—è–¥ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        [
            InlineKeyboardButton(text="üë∑ –°—Ç—Ä–æ–∏—Ç–µ–ª—å", callback_data="train_builder"),
            InlineKeyboardButton(text="üë®‚Äçüåæ –§–µ—Ä–º–µ—Ä", callback_data="train_farmer"),
            InlineKeyboardButton(text="üßë‚Äçüöí –õ–µ—Å–Ω–∏–∫", callback_data="train_woodman")
        ],
        # –†—è–¥ 2: –ë–æ–µ–≤—ã–µ –∏ –¥–æ–±—ã–≤–∞—é—â–∏–µ
        [
            InlineKeyboardButton(text="üíÇ –°–æ–ª–¥–∞—Ç", callback_data="train_soldier"),
            InlineKeyboardButton(text="üé£ –†—ã–±–∞–∫", callback_data="train_fisherman"),
            InlineKeyboardButton(text="üë®‚Äçüî¨ –£—á–µ–Ω—ã–π", callback_data="train_scientist")
        ],
        # –†—è–¥ 3: –û–±—Å–ª—É–∂–∏–≤–∞—é—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        [
            InlineKeyboardButton(text="üë®‚Äçüç≥ –ü–æ–≤–∞—Ä", callback_data="train_cook"),
            InlineKeyboardButton(text="üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å", callback_data="train_teacher"),
            InlineKeyboardButton(text="üßë‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä", callback_data="train_doctor")
        ],
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_academy")]
    ])
    return keyboard


def get_training_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="confirm_training")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="expert_courses")]
    ])
    return keyboard


def get_training_class_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É—á–µ–±–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí† –£—Å–∫–æ—Ä–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="boost_training")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="training_class")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_academy")]
    ])
    return keyboard
