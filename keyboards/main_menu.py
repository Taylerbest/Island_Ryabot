"""
–°–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é –¥–ª—è Ryabot Island v2.0
–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Supabase –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
"""
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from utils.texts import t
import logging

logger = logging.getLogger(__name__)

def get_start_menu(lang: str = 'ru') -> ReplyKeyboardMarkup:
    """
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (–≤–Ω–µ –æ—Å—Ç—Ä–æ–≤–∞)
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω
    """
    try:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
                [KeyboardButton(text=t('btn_enter_island', lang, default="üèùÔ∏è –í–æ–π—Ç–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤"))],

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                [
                    KeyboardButton(text=t('btn_settings', lang, default="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")),
                    KeyboardButton(text=t('btn_support', lang, default="üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞")),
                    KeyboardButton(text=t('btn_language', lang, default="üåç –Ø–∑—ã–∫"))
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder=t('placeholder_start_menu', lang,
                                     default="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã..."),
            selective=True
        )

        logger.debug(f"Start menu created for language: {lang}")
        return keyboard

    except Exception as e:
        logger.error(f"Error creating start menu for {lang}: {e}")
        # Fallback –º–µ–Ω—é
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üèùÔ∏è –í–æ–π—Ç–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤")],
                [
                    KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                    KeyboardButton(text="üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
                ]
            ],
            resize_keyboard=True
        )

def get_island_menu(lang: str = 'ru') -> ReplyKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é (–Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ)
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ 2x4 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    try:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                # –†—è–¥ 1: –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                [
                    KeyboardButton(text=t('menu_farm', lang, default="üè† –§–µ—Ä–º–∞")),
                    KeyboardButton(text=t('menu_town', lang, default="üè¢ –ì–æ—Ä–æ–¥"))
                ],
                # –†—è–¥ 2: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
                [
                    KeyboardButton(text=t('menu_citizen', lang, default="üë§ –ñ–∏—Ç–µ–ª—å")),
                    KeyboardButton(text=t('menu_work', lang, default="üíº ‚ÇΩ—è–±–æ—Ç–∞"))
                ],
                # –†—è–¥ 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏
                [
                    KeyboardButton(text=t('menu_storage', lang, default="üéí –†—é–∫–∑–∞–∫")),
                    KeyboardButton(text=t('menu_referral', lang, default="üë• –î—Ä—É–∑—å—è"))
                ],
                # –†—è–¥ 4: –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                [
                    KeyboardButton(text=t('menu_rankings', lang, default="üèÜ –õ–∏–¥–µ—Ä—ã")),
                    KeyboardButton(text=t('menu_about', lang, default="üóÑÔ∏è –ü—Ä–æ—á–µ–µ"))
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder=t('placeholder_island_menu', lang,
                                     default="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –∏–ª–∏ /claim –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π!"),
            selective=False
        )

        logger.debug(f"Island menu created for language: {lang}")
        return keyboard

    except Exception as e:
        logger.error(f"Error creating island menu for {lang}: {e}")
        # Fallback –º–µ–Ω—é
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üè† –§–µ—Ä–º–∞"), KeyboardButton(text="üè¢ –ì–æ—Ä–æ–¥")],
                [KeyboardButton(text="üë§ –ñ–∏—Ç–µ–ª—å"), KeyboardButton(text="üíº ‚ÇΩ—è–±–æ—Ç–∞")],
                [KeyboardButton(text="üéí –†—é–∫–∑–∞–∫"), KeyboardButton(text="üë• –î—Ä—É–∑—å—è")],
                [KeyboardButton(text="üèÜ –õ–∏–¥–µ—Ä—ã"), KeyboardButton(text="üóÑÔ∏è –ü—Ä–æ—á–µ–µ")]
            ],
            resize_keyboard=True
        )

def get_tutorial_keyboard(step: int, lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
    –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞ –æ–±—É—á–µ–Ω–∏—è
    """
    try:
        if step == 0:  # –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=t('btn_tutorial_start', lang, default="üéì –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"),
                    callback_data="tutorial_start"
                )],
                [InlineKeyboardButton(
                    text=t('btn_tutorial_skip', lang, default="‚ö° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
                    callback_data="tutorial_skip"
                )]
            ])

        elif 1 <= step <= 2:  # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=t('btn_tutorial_next', lang, default="‚û°Ô∏è –î–∞–ª–µ–µ"),
                    callback_data=f"tutorial_step_{step + 1}"
                )],
                [InlineKeyboardButton(
                    text=t('btn_tutorial_skip', lang, default="‚ö° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
                    callback_data="tutorial_skip"
                )]
            ])

        elif step == 3:  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=t('btn_tutorial_complete', lang, default="üéâ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ"),
                    callback_data="tutorial_complete"
                )],
                [InlineKeyboardButton(
                    text=t('btn_tutorial_skip', lang, default="‚ö° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
                    callback_data="tutorial_skip"
                )]
            ])

        else:  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (step >= 4)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=t('btn_tutorial_finish', lang, default="‚ú® –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"),
                    callback_data="tutorial_complete"
                )]
            ])

        logger.debug(f"Tutorial keyboard created for step {step}, language: {lang}")
        return keyboard

    except Exception as e:
        logger.error(f"Error creating tutorial keyboard for step {step}: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"tutorial_step_{step + 1}")],
            [InlineKeyboardButton(text="‚ö° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="tutorial_skip")]
        ])

def get_language_selection_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    –†–∞—Å—à–∏—Ä—è–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö —è–∑—ã–∫–æ–≤
    """
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # –û—Å–Ω–æ–≤–Ω—ã–µ —è–∑—ã–∫–∏
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            # –ë—É–¥—É—â–∏–µ —è–∑—ã–∫–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
            # [InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_en")],
            # [InlineKeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_uk")],
            # [InlineKeyboardButton(text="üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")],

            # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
            [InlineKeyboardButton(
                text="‚ùì –ü–æ–º–æ—á—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º",
                callback_data="help_translate"
            )]
        ])

        logger.debug("Language selection keyboard created")
        return keyboard

    except Exception as e:
        logger.error(f"Error creating language keyboard: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")]
        ])

def get_quick_actions_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö (Quantum Pass, –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
    """
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # –†—è–¥ 1: –°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
            [
                InlineKeyboardButton(
                    text=t('quick_claim_energy', lang, default="üîã –°–æ–±—Ä–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é"),
                    callback_data="quick_claim_energy"
                ),
                InlineKeyboardButton(
                    text=t('quick_gather_all', lang, default="üß∫ –°–æ–±—Ä–∞—Ç—å –≤—Å—ë"),
                    callback_data="quick_gather_all"
                )
            ],
            # –†—è–¥ 2: –≠–∫–æ–Ω–æ–º–∏–∫–∞
            [
                InlineKeyboardButton(
                    text=t('quick_economy', lang, default="üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞"),
                    callback_data="quick_economy"
                ),
                InlineKeyboardButton(
                    text=t('quick_stats', lang, default="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                    callback_data="quick_stats"
                )
            ],
            # –†—è–¥ 3: –ù–∞–≤–∏–≥–∞—Ü–∏—è
            [
                InlineKeyboardButton(
                    text=t('quick_academy', lang, default="üéì –ê–∫–∞–¥–µ–º–∏—è"),
                    callback_data="academy"
                ),
                InlineKeyboardButton(
                    text=t('quick_expeditions', lang, default="üó∫Ô∏è –≠–∫—Å–ø–µ–¥–∏—Ü–∏–∏"),
                    callback_data="expeditions"
                )
            ]
        ])

        logger.debug(f"Quick actions keyboard created for language: {lang}")
        return keyboard

    except Exception as e:
        logger.error(f"Error creating quick actions keyboard: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="quick_economy")]
        ])

def get_settings_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            [
                InlineKeyboardButton(
                    text=t('settings_language', lang, default="üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"),
                    callback_data="settings_language"
                )
            ],
            [
                InlineKeyboardButton(
                    text=t('settings_notifications', lang, default="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
                    callback_data="settings_notifications"
                )
            ],
            # –ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            [
                InlineKeyboardButton(
                    text=t('settings_quantum_pass', lang, default="‚ú® Quantum Pass"),
                    callback_data="settings_quantum_pass"
                )
            ],
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
            [
                InlineKeyboardButton(
                    text=t('settings_reset_tutorial', lang, default="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç—É—Ç–æ—Ä–∏–∞–ª"),
                    callback_data="settings_reset_tutorial"
                )
            ],
            # –ù–∞–∑–∞–¥
            [
                InlineKeyboardButton(
                    text=t('btn_back', lang, default="‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
                    callback_data="back_to_start"
                )
            ]
        ])

        logger.debug(f"Settings keyboard created for language: {lang}")
        return keyboard

    except Exception as e:
        logger.error(f"Error creating settings keyboard: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåç –Ø–∑—ã–∫", callback_data="settings_language")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])

def get_support_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø–æ–º–æ—â–∏
    """
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏
            [
                InlineKeyboardButton(
                    text=t('support_telegram', lang, default="üí¨ Telegram –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
                    url="https://t.me/ryabot_support"
                )
            ],
            [
                InlineKeyboardButton(
                    text=t('support_faq', lang, default="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
                    callback_data="support_faq"
                )
            ],
            # –û—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö
            [
                InlineKeyboardButton(
                    text=t('support_bug_report', lang, default="üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ"),
                    callback_data="support_bug_report"
                )
            ],
            [
                InlineKeyboardButton(
                    text=t('support_feature_request', lang, default="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é"),
                    callback_data="support_feature_request"
                )
            ],
            # –°–æ–æ–±—â–µ—Å—Ç–≤–æ
            [
                InlineKeyboardButton(
                    text=t('support_community', lang, default="üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤"),
                    url="https://t.me/ryabot_island_chat"
                )
            ],
            # –ù–∞–∑–∞–¥
            [
                InlineKeyboardButton(
                    text=t('btn_back', lang, default="‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
                    callback_data="back_to_start"
                )
            ]
        ])

        logger.debug(f"Support keyboard created for language: {lang}")
        return keyboard

    except Exception as e:
        logger.error(f"Error creating support keyboard: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/ryabot_support")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])

def get_back_button(lang: str = 'ru', callback_data: str = "back") -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ–Ω—é –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    """
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=t('btn_back', lang, default="‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
                callback_data=callback_data
            )]
        ])

        return keyboard

    except Exception as e:
        logger.error(f"Error creating back button: {e}")
        # Fallback –∫–Ω–æ–ø–∫–∞
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]
        ])

# –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def validate_keyboard_structure(keyboard: ReplyKeyboardMarkup) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã Telegram API
    """
    try:
        if not keyboard.keyboard:
            return False

        # –ú–∞–∫—Å–∏–º—É–º 12 —Å—Ç—Ä–æ–∫
        if len(keyboard.keyboard) > 12:
            logger.warning("Reply keyboard has more than 12 rows")
            return False

        # –ú–∞–∫—Å–∏–º—É–º 4 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for row in keyboard.keyboard:
            if len(row) > 4:
                logger.warning("Reply keyboard row has more than 4 buttons")
                return False

        return True

    except Exception as e:
        logger.error(f"Error validating keyboard structure: {e}")
        return False

def validate_inline_keyboard_structure(keyboard: InlineKeyboardMarkup) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã Telegram API
    """
    try:
        if not keyboard.inline_keyboard:
            return False

        # –ú–∞–∫—Å–∏–º—É–º 100 –∫–Ω–æ–ø–æ–∫ –æ–±—â–∏–º —á–∏—Å–ª–æ–º
        total_buttons = sum(len(row) for row in keyboard.inline_keyboard)
        if total_buttons > 100:
            logger.warning("Inline keyboard has more than 100 buttons")
            return False

        # –ú–∞–∫—Å–∏–º—É–º 8 –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
        for row in keyboard.inline_keyboard:
            if len(row) > 8:
                logger.warning("Inline keyboard row has more than 8 buttons")
                return False

        return True

    except Exception as e:
        logger.error(f"Error validating inline keyboard structure: {e}")
        return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_adaptive_keyboard(items: list, max_columns: int = 2, lang: str = 'ru') -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    """
    try:
        if not items:
            return get_island_menu(lang)  # Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é

        rows = []
        current_row = []

        for item in items:
            current_row.append(KeyboardButton(text=item))

            if len(current_row) >= max_columns:
                rows.append(current_row)
                current_row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
        if current_row:
            rows.append(current_row)

        keyboard = ReplyKeyboardMarkup(
            keyboard=rows,
            resize_keyboard=True,
            one_time_keyboard=False
        )

        if validate_keyboard_structure(keyboard):
            return keyboard
        else:
            logger.warning("Adaptive keyboard validation failed, using fallback")
            return get_island_menu(lang)

    except Exception as e:
        logger.error(f"Error creating adaptive keyboard: {e}")
        return get_island_menu(lang)

def create_adaptive_inline_keyboard(items: list, max_columns: int = 2) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å tuple (text, callback_data)
    """
    try:
        if not items:
            return InlineKeyboardMarkup(inline_keyboard=[])

        rows = []
        current_row = []

        for item in items:
            if isinstance(item, tuple) and len(item) == 2:
                text, callback_data = item
                current_row.append(InlineKeyboardButton(text=text, callback_data=callback_data))

                if len(current_row) >= max_columns:
                    rows.append(current_row)
                    current_row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
        if current_row:
            rows.append(current_row)

        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

        if validate_inline_keyboard_structure(keyboard):
            return keyboard
        else:
            logger.warning("Adaptive inline keyboard validation failed")
            return InlineKeyboardMarkup(inline_keyboard=[])

    except Exception as e:
        logger.error(f"Error creating adaptive inline keyboard: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[])

logger.info("‚úÖ Main menu keyboards loaded (Supabase –≤–µ—Ä—Å–∏—è)")
