import asyncio
import socket
import asyncpg
import os
from dotenv import load_dotenv

load_dotenv()


async def network_test():
    original_host = "db.fqgcctsvozcoezpfytck.supabase.co"
    fallback_ip = "3.64.163.50"

    print("üåê –¢–ï–°–¢ –°–ï–¢–ò –ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
    print("=" * 40)

    # 1. –¢–µ—Å—Ç DNS
    print(f"1Ô∏è‚É£ DNS —Ä–µ–∑–æ–ª—é—Ü–∏—è: {original_host}")
    try:
        ipv4 = socket.gethostbyname(original_host)
        print(f"   ‚úÖ –£—Å–ø–µ—Ö: {ipv4}")
        use_host = ipv4
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"   üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: {fallback_ip}")
        use_host = fallback_ip

    # 2. –¢–µ—Å—Ç TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    print(f"\n2Ô∏è‚É£ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {use_host}:5432")
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        result = sock.connect_ex((use_host, 5432))
        sock.close()

        if result == 0:
            print("   ‚úÖ –ü–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç")
        else:
            print("   ‚ùå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ TCP: {e}")

    # 3. –¢–µ—Å—Ç PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print(f"\n3Ô∏è‚É£ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    try:
        conn = await asyncpg.connect(
            host=use_host,
            user=os.getenv("POSTGRES_USER"),
            password=os.getenv("POSTGRES_PASSWORD"),
            database=os.getenv("POSTGRES_DB"),
            port=5432,
            ssl='require',
            timeout=15
        )

        result = await conn.fetchval("SELECT current_database()")
        print(f"   ‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–∞–∑–∞: {result}")
        await conn.close()

    except Exception as e:
        print(f"   ‚ùå PostgreSQL –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")


if __name__ == "__main__":
    asyncio.run(network_test())
