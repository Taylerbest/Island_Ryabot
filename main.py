"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ Ryabot Island (—Ç–æ–ª—å–∫–æ –¥–ª—è polling —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ PostgreSQL/Supabase
"""
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
import os
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    stream=sys.stdout
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
from handlers import (
    start, academy, town, farm, work,
    citizen, storage, rankings, referral, about, admin
)

# –ò–º–ø–æ—Ä—Ç middleware
from middlewares.throttling import ThrottlingMiddleware

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
    dp.callback_query.middleware(ThrottlingMiddleware(rate_limit=0.3))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
    logging.info("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    try:
        from database.models import initialize_db_pool, init_database, create_academy_tables

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await initialize_db_pool()
        logging.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        await init_database()
        logging.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

        await create_academy_tables()
        logging.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∞–∫–∞–¥–µ–º–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
    routers = [
        start.router,      # –°—Ç–∞—Ä—Ç –∏ —Ç—É—Ç–æ—Ä–∏–∞–ª
        academy.router,    # –ê–∫–∞–¥–µ–º–∏—è –∏ –Ω–∞—ë–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        town.router,       # –ì–æ—Ä–æ–¥ –∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        farm.router,       # –§–µ—Ä–º–∞ –∏ –∂–∏–≤–æ—Ç–Ω—ã–µ
        work.router,       # –†–∞–±–æ—Ç–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫
        citizen.router,    # –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∂–∏—Ç–µ–ª—è
        storage.router,    # –°–∫–ª–∞–¥ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        rankings.router,   # –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        referral.router,   # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        about.router,      # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ
        admin.router       # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    ]

    for i, router in enumerate(routers, 1):
        dp.include_router(router)
        logging.info(f"‚úÖ –†–æ—É—Ç–µ—Ä {i}/{len(routers)} –ø–æ–¥–∫–ª—é—á–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Ryabot Island...")
    try:
        # –£–¥–∞–ª—è–µ–º webhook (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        await bot.delete_webhook(drop_pending_updates=True)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logging.info(f"ü§ñ –ë–æ—Ç @{bot_info.username} –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç—Ä–æ–≤–∞
        try:
            from database.models import get_island_stats
            stats = await get_island_stats()
            logging.info(f"üèùÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_players']} –∏–≥—Ä–æ–∫–æ–≤, {stats['active_expeditions']} —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(
            bot,
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query"]
        )

    except KeyboardInterrupt:
        logging.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        logging.info("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
        try:
            from database.models import close_connection_pool
            await close_connection_pool()
            logging.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        try:
            await bot.session.close()
            logging.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞: {e}")


if __name__ == '__main__':
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)
