"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ Ryabot Island —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Supabase
–í–µ—Ä—Å–∏—è 2.0 - –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Supabase Python SDK
"""
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
import os
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    stream=sys.stdout,
    datefmt="%Y-%m-%d %H:%M:%S"
)

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è Supabase
REQUIRED_ENV_VARS = {
    "BOT_TOKEN": "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞",
    "SUPABASE_URL": "URL –ø—Ä–æ–µ–∫—Ç–∞ Supabase",
    "SUPABASE_ANON_KEY": "–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á Supabase"
}

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    missing_vars = []

    for var, description in REQUIRED_ENV_VARS.items():
        if not os.getenv(var):
            missing_vars.append(f"{var} ({description})")

    if missing_vars:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            logger.error(f"   - {var}")
        logger.error("\nüí° –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –≤–∞—à .env —Ñ–∞–π–ª:")
        logger.error("   SUPABASE_URL=https://your-project.supabase.co")
        logger.error("   SUPABASE_ANON_KEY=your-anon-key")
        logger.error("   BOT_TOKEN=your-bot-token")
        sys.exit(1)

async def init_supabase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    logger.info("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...")

    try:
        from database.supabase_client import supabase_manager

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        supabase_manager.initialize()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        client = supabase_manager.get_client()

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_result = await supabase_manager.execute_query(
            table="users",
            operation="count"
        )

        logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {test_result or 0}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        logger.error("   1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SUPABASE_URL –∏ SUPABASE_ANON_KEY")
        logger.error("   2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
        logger.error("   3. –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Supabase Dashboard")
        return False

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å middleware"""
    bot = Bot(token=os.getenv("BOT_TOKEN"))
    dp = Dispatcher(storage=MemoryStorage())

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
    from middlewares.throttling import ThrottlingMiddleware
    dp.callback_query.middleware(ThrottlingMiddleware(rate_limit=0.3))

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
    logger.info("üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π...")

    try:
        from handlers import (
            start, academy, town, farm, work,
            citizen, storage, rankings, referral, about, admin
        )

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
        routers_list = [
            ('start', start.router),          # –°—Ç–∞—Ä—Ç –∏ —Ç—É—Ç–æ—Ä–∏–∞–ª
            ('academy', academy.router),      # –ê–∫–∞–¥–µ–º–∏—è –∏ –Ω–∞—ë–º
            ('town', town.router),           # –ì–æ—Ä–æ–¥ –∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            ('farm', farm.router),           # –§–µ—Ä–º–∞ –∏ –∂–∏–≤–æ—Ç–Ω—ã–µ
            ('work', work.router),           # –†–∞–±–æ—Ç–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫
            ('citizen', citizen.router),     # –ü—Ä–æ—Ñ–∏–ª—å –∂–∏—Ç–µ–ª—è
            ('storage', storage.router),     # –°–∫–ª–∞–¥ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            ('rankings', rankings.router),   # –†–µ–π—Ç–∏–Ω–≥–∏
            ('referral', referral.router),   # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            ('about', about.router),         # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            ('admin', admin.router)          # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        ]

        for name, router_obj in routers_list:
            dp.include_router(router_obj)
            logger.info(f"   ‚úÖ {name.capitalize()} –º–æ–¥—É–ª—å")

    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        raise

    return bot, dp

async def get_bot_info(bot):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    try:
        bot_info = await bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç: @{bot_info.username} ({bot_info.first_name})")
        logger.info(f"üÜî ID: {bot_info.id}")
        return bot_info
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        raise

async def get_game_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        from database.models import get_island_stats
        stats = await get_island_stats()

        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Ryabot Island:")
        logger.info(f"   üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {stats.get('total_players', 0)}")
        logger.info(f"   üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('online_players', 0)}")
        logger.info(f"   üí† RBTC —Å–µ–≥–æ–¥–Ω—è: {stats.get('daily_rbtc', 0):.2f}")
        logger.info(f"   üó∫Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π: {stats.get('active_expeditions', 0)}")

        return stats
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    logger.info("=" * 60)
    logger.info("üèùÔ∏è  RYABOT ISLAND - –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê")
    logger.info("üîÑ  –í–µ—Ä—Å–∏—è 2.0 - –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Supabase")
    logger.info("=" * 60)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    check_environment()
    logger.info("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    logger.info("2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
    if not await init_supabase():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        sys.exit(1)

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    logger.info("3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞...")
    try:
        bot, dp = await setup_bot()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        sys.exit(1)

    # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    logger.info("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞...")
    try:
        await get_bot_info(bot)
    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º: {e}")
        sys.exit(1)

    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    logger.info("5Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    await get_game_statistics()

    # 6. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö RYABOT ISLAND")
    logger.info("=" * 60)

    try:
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook
        await bot.delete_webhook(drop_pending_updates=True)

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        logger.info("üîÑ –†–µ–∂–∏–º: Long Polling")
        logger.info("‚ú® –û—Å—Ç—Ä–æ–≤ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!")
        logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")

        await dp.start_polling(
            bot,
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query"]
        )

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {e}")

    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        logger.info("=" * 60)
        logger.info("üßπ –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´")
        logger.info("=" * 60)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        try:
            await bot.session.close()
            logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–æ—Ç–∞: {e}")

        # Supabase –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        logger.info("‚úÖ Supabase —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")

        logger.info("üëã Ryabot Island –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")

def run():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)

if __name__ == '__main__':
    run()
