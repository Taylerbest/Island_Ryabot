"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
"""
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, List, Any
from database.supabase_client import supabase_manager

logger = logging.getLogger(__name__)


class User:
    def __init__(self, data: dict = None):
        if data:
            self.user_id = data.get('user_id', 0)
            self.username = data.get('username')
            self.language = data.get('language', 'ru')
            self.level = data.get('level', 1)
            self.experience = data.get('experience', 0)
            self.energy = data.get('energy', 100)
            self.ryabucks = data.get('ryabucks', 1000)
            self.rbtc = float(data.get('rbtc', 0.0))
            self.golden_shards = data.get('golden_shards', 0)
            self.quantum_keys = data.get('quantum_keys', 0)
            self.land_plots = data.get('land_plots', 1)
            self.tutorial_completed = bool(data.get('tutorial_completed', False))
            self.current_state = data.get('current_state')
            self.activity_data = data.get('activity_data')
            self.created_at = data.get('created_at')
            self.last_active = data.get('last_active')


# === USER FUNCTIONS ===

async def get_user(user_id: int) -> Optional[User]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase"""
    try:
        result = await supabase_manager.execute_query(
            table="users",
            operation="select",
            filters={"user_id": user_id}
        )

        if result.data:
            return User(result.data[0])
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None


async def create_user(user_id: int, username: str = None) -> Optional[User]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data = {
            "user_id": user_id,
            "username": username,
            "created_at": datetime.now().isoformat(),
            "last_active": datetime.now().isoformat()
        }

        result = await supabase_manager.execute_query(
            table="users",
            operation="insert",
            data=user_data
        )

        if result.data:
            return User(result.data[0])
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None


async def update_user_resources(user_id: int, **resources):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user(user_id)
        if not user:
            return False

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updates = {"last_active": datetime.now().isoformat()}

        for resource, amount in resources.items():
            if hasattr(user, resource):
                current_value = getattr(user, resource)
                updates[resource] = current_value + amount

        result = await supabase_manager.execute_query(
            table="users",
            operation="update",
            data=updates,
            filters={"user_id": user_id}
        )

        return result.data is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


# === ACADEMY FUNCTIONS ===

async def get_hired_workers_count(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–Ω—è—Ç—ã—Ö —Ä–∞–±–æ—á–∏—Ö"""
    try:
        result = await supabase_manager.execute_query(
            table="hired_workers",
            operation="select",
            select="worker_type, count(*)",
            filters={"user_id": user_id}
        )

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è GROUP BY
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if result.data:
            return {"laborer": len([w for w in result.data if w.get("status") != "consumed"])}
        return {"laborer": 0}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö {user_id}: {e}")
        return {}


async def hire_worker(user_id: int) -> tuple[bool, str]:
    """–ù–∞–π–º —Ä–∞–±–æ—á–µ–≥–æ —á–µ—Ä–µ–∑ Supabase"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π–º–∞
        can_hire, reason, remaining = await can_hire_worker(user_id)
        if not can_hire:
            return False, f"–ù–µ –º–æ–∂–µ—Ç–µ –Ω–∞–Ω—è—Ç—å: {reason}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        user = await get_user(user_id)
        if not user:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        workers_count = await get_hired_workers_count(user_id)
        total_workers = sum(workers_count.values())
        hire_cost = 30 + (5 * total_workers)

        if user.ryabucks < hire_cost:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤! –ù—É–∂–Ω–æ: {hire_cost}üíµ"

        # –ù–∞–Ω–∏–º–∞–µ–º —Ä–∞–±–æ—á–µ–≥–æ
        worker_data = {
            "user_id": user_id,
            "worker_type": "laborer",
            "status": "idle",
            "hired_at": datetime.now().isoformat(),
            "next_available_at": (datetime.now() + timedelta(hours=24)).isoformat()
        }

        result = await supabase_manager.execute_query(
            table="hired_workers",
            operation="insert",
            data=worker_data
        )

        if result.data:
            # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
            await update_user_resources(user_id, ryabucks=-hire_cost)
            return True, f"–†–∞–±–æ—á–∏–π –Ω–∞–Ω—è—Ç! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {hire_cost}üíµ"

        return False, "–û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ {user_id}: {e}")
        return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–π–º–µ"


# === ISLAND STATS ===

async def get_island_stats() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç—Ä–æ–≤–∞"""
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        total_result = await supabase_manager.execute_query(
            table="users",
            operation="select",
            select="count(*)"
        )

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–µ–≥–æ–¥–Ω—è (–Ω—É–∂–Ω–∞ RPC —Ñ—É–Ω–∫—Ü–∏—è)
        active_result = await supabase_manager.execute_query(
            table="users",
            operation="select",
            select="count(*)"
            # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        )

        return {
            'total_players': len(total_result.data) if total_result.data else 42,
            'online_players': 12,  # –ó–∞–≥–ª—É—à–∫–∞
            'daily_rbtc': 15.67,  # –ó–∞–≥–ª—É—à–∫–∞
            'active_expeditions': 8  # –ó–∞–≥–ª—É—à–∫–∞
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'total_players': 42,
            'online_players': 12,
            'daily_rbtc': 15.67,
            'active_expeditions': 8
        }


# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async def initialize_supabase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞"""
    supabase_manager.initialize()
    logger.info("‚úÖ Supabase –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
