"""
–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Ryabot Island (—Ç–æ–ª—å–∫–æ PostgreSQL/Supabase)
"""
import os
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, List

import asyncpg
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

# ================== POSTGRESQL CONNECTION POOL ==================

async def close_all(self):
    if self.pool:
        await self.pool.close()
        logger.info("‚úÖ PostgreSQL connection pool closed")

    async def initialize(self):
        # IPv4 Fix: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∑–æ–ª–≤–∏–º —Ö–æ—Å—Ç –≤ IPv4
        import socket
        original_host = os.getenv("POSTGRES_HOST")
        user = os.getenv("POSTGRES_USER")
        password = os.getenv("POSTGRES_PASSWORD")
        database = os.getenv("POSTGRES_DB", "postgres")
        port = int(os.getenv("POSTGRES_PORT", 5432))

        # DNS —Ä–µ–∑–æ–ª—é—Ü–∏—è –≤ IPv4
        try:
            ipv4_host = socket.gethostbyname(original_host)
            logger.info(f"‚úÖ Resolved {original_host} to IPv4: {ipv4_host}")
            use_host = ipv4_host
        except Exception as e:
            logger.error(f"‚ùå Failed to resolve {original_host}: {e}")
            use_host = original_host  # Fallback

        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {use_host}:{port}")

        try:
            self.pool = await asyncpg.create_pool(
                host=use_host,
                user=user,
                password=password,
                database=database,
                port=port,
                ssl='require',  # SSL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Supabase
                min_size=1,
                max_size=5,
                command_timeout=60,
                timeout=15
            )
            logger.info("‚úÖ PostgreSQL pool created!")

        except Exception as e:
            logger.error(f"‚ùå Pool creation failed: {type(e).__name__}: {e}")
            raise

    async def close_all(self):
        """–î–æ–±–∞–≤—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥!"""
        if self.pool:
            await self.pool.close()
            logger.info("‚úÖ PostgreSQL connection pool closed")


# ================== POSTGRESQL CONNECTION POOL ==================

class PostgresConnectionPool:
    def __init__(self):
        self.pool = None

    async def initialize(self):
        # IPv4 Fix: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∑–æ–ª–≤–∏–º —Ö–æ—Å—Ç –≤ IPv4
        import socket
        original_host = os.getenv("POSTGRES_HOST")
        user = os.getenv("POSTGRES_USER")
        password = os.getenv("POSTGRES_PASSWORD")
        database = os.getenv("POSTGRES_DB", "postgres")
        port = int(os.getenv("POSTGRES_PORT", 5432))

        # DNS —Ä–µ–∑–æ–ª—é—Ü–∏—è –≤ IPv4
        try:
            ipv4_host = socket.gethostbyname(original_host)
            logger.info(f"‚úÖ Resolved {original_host} to IPv4: {ipv4_host}")
            use_host = ipv4_host
        except Exception as e:
            logger.error(f"‚ùå Failed to resolve {original_host}: {e}")
            use_host = original_host  # Fallback

        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {use_host}:{port}")

        try:
            self.pool = await asyncpg.create_pool(
                host=use_host,
                user=user,
                password=password,
                database=database,
                port=port,
                ssl='require',  # SSL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Supabase
                min_size=1,
                max_size=5,
                command_timeout=60,
                timeout=15
            )
            logger.info("‚úÖ PostgreSQL pool created!")

        except Exception as e:
            logger.error(f"‚ùå Pool creation failed: {type(e).__name__}: {e}")
            raise

    async def acquire(self):
        return await self.pool.acquire()

    async def release(self, conn):
        await self.pool.release(conn)

    async def close_all(self):
        if self.pool:
            await self.pool.close()
            logger.info("‚úÖ PostgreSQL connection pool closed")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª (–ü–û–°–õ–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞!)
connection_pool = PostgresConnectionPool()


# ================== UTILITY FUNCTIONS ==================

async def execute_db(query: str, *params, fetch_one=False, fetch_all=False):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ PostgreSQL"""
    conn = await connection_pool.acquire()
    try:
        if fetch_one:
            result = await conn.fetchrow(query, *params)
            return dict(result) if result else None
        elif fetch_all:
            results = await conn.fetch(query, *params)
            return [dict(row) for row in results] if results else []
        else:
            return await conn.execute(query, *params)
    except Exception as e:
        logger.error(f"Database error: {e} | Query: {query} | Params: {params}", exc_info=True)
        return None
    finally:
        await connection_pool.release(conn)

# ================== INITIALIZATION ==================

async def initialize_db_pool():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    await connection_pool.initialize()

async def close_connection_pool():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    await connection_pool.close_all()

async def init_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
    queries = [
        """CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            language TEXT DEFAULT 'ru',
            level INTEGER DEFAULT 1,
            experience INTEGER DEFAULT 0,
            energy INTEGER DEFAULT 100,
            ryabucks INTEGER DEFAULT 1000,
            rbtc NUMERIC(10,2) DEFAULT 0.0,
            golden_shards INTEGER DEFAULT 0,
            quantum_keys INTEGER DEFAULT 0,
            land_plots INTEGER DEFAULT 1,
            tutorial_completed BOOLEAN DEFAULT FALSE,
            current_state TEXT,
            activity_data TEXT,
            created_at TIMESTAMP DEFAULT NOW(),
            last_active TIMESTAMP DEFAULT NOW()
        )""",

        """CREATE TABLE IF NOT EXISTS farm_buildings (
            id SERIAL PRIMARY KEY,
            user_id BIGINT REFERENCES users(user_id),
            building_type TEXT NOT NULL,
            level INTEGER DEFAULT 1,
            is_active BOOLEAN DEFAULT TRUE,
            last_collected TIMESTAMP,
            next_collection TIMESTAMP,
            plot_id INTEGER,
            created_at TIMESTAMP DEFAULT NOW()
        )""",

        """CREATE TABLE IF NOT EXISTS expeditions (
            id SERIAL PRIMARY KEY,
            user_id BIGINT REFERENCES users(user_id),
            zone_id INTEGER,
            status TEXT DEFAULT 'active',
            rbtc_found NUMERIC(10,2) DEFAULT 0.0,
            started_at TIMESTAMP DEFAULT NOW(),
            completed_at TIMESTAMP
        )""",

        """CREATE TABLE IF NOT EXISTS island_stats (
                                                       id SERIAL PRIMARY KEY,
                                                       date DATE UNIQUE DEFAULT CURRENT_DATE,
                                                       total_players INTEGER DEFAULT 0,
                                                       active_players INTEGER DEFAULT 0,
                                                       daily_rbtc NUMERIC(10,2) DEFAULT 0.0,
            active_expeditions INTEGER DEFAULT 0,
            updated_at TIMESTAMP DEFAULT NOW()
        )""",

        # –ò–Ω–¥–µ–∫—Å—ã
        "CREATE INDEX IF NOT EXISTS idx_users_id ON users(user_id)",
        "CREATE INDEX IF NOT EXISTS idx_users_last_active ON users(last_active)",
        "CREATE INDEX IF NOT EXISTS idx_farm_buildings_userid ON farm_buildings(user_id)",
        "CREATE INDEX IF NOT EXISTS idx_expeditions_userid ON expeditions(user_id)",
        "CREATE INDEX IF NOT EXISTS idx_expeditions_status ON expeditions(status)"
    ]

    for query in queries:
        await execute_db(query)

    logger.info("‚úÖ Database tables created")

# ================== MODELS ==================

class User:
    def __init__(self, data: dict = None):
        if data:
            self.user_id = data.get('user_id', 0)
            self.username = data.get('username')
            self.language = data.get('language', 'ru')
            self.level = data.get('level', 1)
            self.experience = data.get('experience', 0)
            self.energy = data.get('energy', 100)
            self.ryabucks = data.get('ryabucks', 1000)
            self.rbtc = float(data.get('rbtc', 0.0))
            self.golden_shards = data.get('golden_shards', 0)
            self.quantum_keys = data.get('quantum_keys', 0)
            self.land_plots = data.get('land_plots', 1)
            self.tutorial_completed = bool(data.get('tutorial_completed', False))
            self.current_state = data.get('current_state')
            self.activity_data = data.get('activity_data')
            self.created_at = data.get('created_at')
            self.last_active = data.get('last_active')
        else:
            # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.user_id = 0
            self.username = None
            self.language = 'ru'
            self.level = 1
            self.experience = 0
            self.energy = 100
            self.ryabucks = 1000
            self.rbtc = 0.0
            self.golden_shards = 0
            self.quantum_keys = 0
            self.land_plots = 1
            self.tutorial_completed = False
            self.current_state = None
            self.activity_data = None
            self.created_at = datetime.now()
            self.last_active = datetime.now()

# ================== USER FUNCTIONS ==================

async def get_user(user_id: int) -> Optional[User]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await execute_db(
        "SELECT * FROM users WHERE user_id = $1", user_id, fetch_one=True
    )
    return User(result) if result else None

async def create_user(user_id: int, username: str = None) -> User:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await execute_db("""
        INSERT INTO users (user_id, username, created_at, last_active) 
        VALUES ($1, $2, NOW(), NOW())
    """, user_id, username)

    return await get_user(user_id)

async def get_user_language(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(user_id)
    return user.language if user else 'ru'

async def update_user_language(user_id: int, language: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞"""
    await execute_db(
        "UPDATE users SET language = $1, last_active = NOW() WHERE user_id = $2",
        language, user_id
    )

async def complete_tutorial(user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    await execute_db("""
        UPDATE users SET 
            tutorial_completed = TRUE,
            ryabucks = ryabucks + 500,
            energy = energy + 20,
            last_active = NOW()
        WHERE user_id = $1
    """, user_id)

async def set_user_state(user_id: int, state: str, activity_data: str = None):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await execute_db("""
        UPDATE users SET 
            current_state = $1,
            activity_data = $2,
            last_active = NOW()
        WHERE user_id = $3
    """, state, activity_data, user_id)

async def clear_user_state(user_id: int):
    """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await set_user_state(user_id, None, None)

async def update_user_resources(user_id: int, **resources):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not resources:
        return

    set_clause = ", ".join([f"{key} = {key} + ${i+1}" for i, key in enumerate(resources.keys())])
    params = list(resources.values()) + [user_id]

    await execute_db(
        f"UPDATE users SET {set_clause}, last_active = NOW() WHERE user_id = ${len(params)}",
        *params
    )

# ================== ACADEMY FUNCTIONS ==================

async def create_academy_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∞–∫–∞–¥–µ–º–∏–∏"""
    queries = [
        """CREATE TABLE IF NOT EXISTS hired_workers (
            id SERIAL PRIMARY KEY,
            user_id BIGINT REFERENCES users(user_id),
            worker_type TEXT DEFAULT 'laborer',
            status TEXT DEFAULT 'idle',
            hired_at TIMESTAMP DEFAULT NOW(),
            next_available_at TIMESTAMP
        )""",

        """CREATE TABLE IF NOT EXISTS training_units (
            id SERIAL PRIMARY KEY,
            user_id BIGINT REFERENCES users(user_id),
            unit_type TEXT NOT NULL,
            status TEXT DEFAULT 'training',
            started_at TIMESTAMP DEFAULT NOW(),
            completed_at TIMESTAMP,
            worker_id INTEGER REFERENCES hired_workers(id)
        )""",

        """CREATE TABLE IF NOT EXISTS trained_specialists (
            id SERIAL PRIMARY KEY,
            user_id BIGINT REFERENCES users(user_id),
            specialist_type TEXT NOT NULL,
            level INTEGER DEFAULT 1,
            status TEXT DEFAULT 'available',
            created_at TIMESTAMP DEFAULT NOW(),
            last_worked TIMESTAMP
        )""",

        """CREATE TABLE IF NOT EXISTS hire_cooldowns (
            id SERIAL PRIMARY KEY,
            user_id BIGINT REFERENCES users(user_id) UNIQUE,
            last_hire_time TIMESTAMP DEFAULT NOW(),
            hires_count INTEGER DEFAULT 0,
            reset_date DATE DEFAULT CURRENT_DATE
        )""",

        # –ò–Ω–¥–µ–∫—Å—ã
        "CREATE INDEX IF NOT EXISTS idx_hired_userid ON hired_workers(user_id)",
        "CREATE INDEX IF NOT EXISTS idx_hired_status ON hired_workers(status)",
        "CREATE INDEX IF NOT EXISTS idx_trainings_userid ON training_units(user_id)",
        "CREATE INDEX IF NOT EXISTS idx_trainings_status ON training_units(status)",
        "CREATE INDEX IF NOT EXISTS idx_specialists_userid ON trained_specialists(user_id)"
    ]

    for query in queries:
        await execute_db(query)

    logger.info("‚úÖ Academy tables created")

async def get_hired_workers_count(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–Ω—è—Ç—ã—Ö —Ä–∞–±–æ—á–∏—Ö"""
    results = await execute_db("""
        SELECT worker_type, COUNT(*) as count
        FROM hired_workers
        WHERE user_id = $1 AND status != 'consumed'
        GROUP BY worker_type
    """, user_id, fetch_all=True)

    return {row['worker_type']: row['count'] for row in results} if results else {}

async def can_hire_worker(user_id: int) -> tuple[bool, str, int]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ"""
    cooldown = await execute_db("""
        SELECT last_hire_time, hires_count, reset_date
        FROM hire_cooldowns
        WHERE user_id = $1
    """, user_id, fetch_one=True)

    if cooldown:
        last_hire = cooldown['last_hire_time']
        hires_today = cooldown['hires_count']
        reset_date = cooldown['reset_date']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
        today = datetime.now().date()
        if reset_date != today:
            hires_today = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω (24 —á–∞—Å–∞)
        time_since_last_hire = datetime.now() - last_hire
        if time_since_last_hire < timedelta(hours=24):
            remaining_seconds = int((timedelta(hours=24) - time_since_last_hire).total_seconds())
            return False, "cooldown", remaining_seconds

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞–π–º–∞ –≤ –¥–µ–Ω—å
        max_hires = 3
        if hires_today >= max_hires:
            return False, "limit_reached", 0

    return True, "ok", 0

async def hire_worker(user_id: int) -> tuple[bool, str]:
    """–ù–∞–π–º —Ä–∞–±–æ—á–µ–≥–æ"""
    can_hire, reason, remaining = await can_hire_worker(user_id)

    if not can_hire:
        if reason == "cooldown":
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            return False, f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –Ω–∞–π–º —á–µ—Ä–µ–∑: {hours}—á {minutes}–º–∏–Ω"
        elif reason == "limit_reached":
            return False, "üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞–π–º–∞! –£–ª—É—á—à–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."

    user = await get_user(user_id)
    if not user:
        return False, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"

    workers_count = await get_hired_workers_count(user_id)
    total_workers = sum(workers_count.values())
    hire_cost = 30 + (5 * total_workers)

    if user.ryabucks < hire_cost:
        return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤! –ù—É–∂–Ω–æ: {hire_cost}üíµ"

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–µ–≥–æ
    next_available = datetime.now() + timedelta(hours=24)
    await execute_db("""
        INSERT INTO hired_workers (user_id, worker_type, status, next_available_at)
        VALUES ($1, 'laborer', 'idle', $2)
    """, user_id, next_available)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω
    await execute_db("""
        INSERT INTO hire_cooldowns (user_id, last_hire_time, hires_count, reset_date)
        VALUES ($1, NOW(), 1, CURRENT_DATE)
        ON CONFLICT (user_id) DO UPDATE SET
            last_hire_time = EXCLUDED.last_hire_time,
            hires_count = CASE
                WHEN hire_cooldowns.reset_date = CURRENT_DATE THEN hire_cooldowns.hires_count + 1
                ELSE 1
            END,
            reset_date = CURRENT_DATE
    """, user_id)

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    await execute_db("""
        UPDATE users SET ryabucks = ryabucks - $1 WHERE user_id = $2
    """, hire_cost, user_id)

    return True, f"‚úÖ –†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π –Ω–∞–Ω—è—Ç! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {hire_cost}üíµ"

async def get_training_slots_info(user_id: int) -> dict:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–∞—Ö –æ–±—É—á–µ–Ω–∏—è"""
    result = await execute_db("""
        SELECT COUNT(*) as count FROM training_units
        WHERE user_id = $1 AND status = 'training'
    """, user_id, fetch_one=True)

    active_training = result['count'] if result else 0
    base_slots = 2
    total_slots = base_slots

    return {
        'used': active_training,
        'total': total_slots,
        'available': total_slots - active_training
    }

async def start_training(user_id: int, unit_type: str) -> tuple[bool, str]:
    """–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
    workers_count = await get_hired_workers_count(user_id)
    if workers_count.get('laborer', 0) == 0:
        return False, "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏—Ö! –ù–∞–π–º–∏—Ç–µ –∏—Ö –Ω–∞ –±–∏—Ä–∂–µ —Ç—Ä—É–¥–∞."

    slots_info = await get_training_slots_info(user_id)
    if slots_info['available'] <= 0:
        return False, "‚ùå –í—Å–µ —É—á–µ–±–Ω—ã–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è."

    training_data = {
        'builder': {'name': 'üë∑ –°—Ç—Ä–æ–∏—Ç–µ–ª—å', 'cost': 100, 'time_hours': 2},
        'farmer': {'name': 'üë®‚Äçüåæ –§–µ—Ä–º–µ—Ä', 'cost': 100, 'time_hours': 2},
        'woodman': {'name': 'üßë‚Äçüöí –õ–µ—Å–Ω–∏–∫', 'cost': 120, 'time_hours': 3},
        'soldier': {'name': 'üíÇ –°–æ–ª–¥–∞—Ç', 'cost': 150, 'time_hours': 4},
        'fisherman': {'name': 'üé£ –†—ã–±–∞–∫', 'cost': 110, 'time_hours': 2.5},
        'scientist': {'name': 'üë®‚Äçüî¨ –£—á–µ–Ω—ã–π', 'cost': 200, 'time_hours': 6},
        'cook': {'name': 'üë®‚Äçüç≥ –ü–æ–≤–∞—Ä', 'cost': 130, 'time_hours': 3},
        'teacher': {'name': 'üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å', 'cost': 180, 'time_hours': 5},
        'doctor': {'name': 'üßë‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä', 'cost': 220, 'time_hours': 8}
    }

    if unit_type not in training_data:
        return False, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è!"

    user = await get_user(user_id)
    unit_info = training_data[unit_type]

    if user.ryabucks < unit_info['cost']:
        return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤! –ù—É–∂–Ω–æ: {unit_info['cost']}üíµ"

    # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ
    worker = await execute_db("""
        SELECT id FROM hired_workers
        WHERE user_id = $1 AND worker_type = 'laborer' AND status = 'idle'
        LIMIT 1
    """, user_id, fetch_one=True)

    if not worker:
        return False, "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏—Ö!"

    worker_id = worker['id']
    completion_time = datetime.now() + timedelta(hours=unit_info['time_hours'])

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—É—á–µ–Ω–∏–µ
    await execute_db("""
        INSERT INTO training_units (user_id, unit_type, started_at, completed_at, worker_id)
        VALUES ($1, $2, NOW(), $3, $4)
    """, user_id, unit_type, completion_time, worker_id)

    # –ü–æ–º–µ—á–∞–µ–º —Ä–∞–±–æ—á–µ–≥–æ –∫–∞–∫ –∑–∞–Ω—è—Ç–æ–≥–æ
    await execute_db("""
        UPDATE hired_workers SET status = 'training' WHERE id = $1
    """, worker_id)

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    await execute_db("""
        UPDATE users SET ryabucks = ryabucks - $1 WHERE user_id = $2
    """, unit_info['cost'], user_id)

    hours = int(unit_info['time_hours'])
    minutes = int((unit_info['time_hours'] % 1) * 60)
    return True, f"‚úÖ {unit_info['name']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ!\n‚è∞ –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑: {hours}—á {minutes}–º–∏–Ω"

async def get_active_trainings(user_id: int) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è"""
    trainings = await execute_db("""
        SELECT unit_type, started_at, completed_at
        FROM training_units
        WHERE user_id = $1 AND status = 'training'
        ORDER BY completed_at ASC
    """, user_id, fetch_all=True)

    result = []
    if trainings:
        for training in trainings:
            unit_type = training['unit_type']
            completed_time = training['completed_at']

            time_left = completed_time - datetime.now()

            if time_left.total_seconds() > 0:
                hours = int(time_left.total_seconds() // 3600)
                minutes = int((time_left.total_seconds() % 3600) // 60)
                result.append({
                    'type': unit_type,
                    'time_left': f"{hours}—á {minutes}–º–∏–Ω"
                })

    return result

async def complete_trainings(user_id: int) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –æ–±—É—á–µ–Ω–∏–π"""
    completed = await execute_db("""
        SELECT id, unit_type, worker_id
        FROM training_units
        WHERE user_id = $1 AND status = 'training' AND completed_at <= NOW()
    """, user_id, fetch_all=True)

    count = 0
    if completed:
        for training in completed:
            training_id = training['id']
            unit_type = training['unit_type']
            worker_id = training['worker_id']

            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            await execute_db("""
                INSERT INTO trained_specialists (user_id, specialist_type, status)
                VALUES ($1, $2, 'available')
            """, user_id, unit_type)

            # –ü–æ–º–µ—á–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ
            await execute_db("""
                UPDATE training_units SET status = 'completed' WHERE id = $1
            """, training_id)

            # –ü–æ–º–µ—á–∞–µ–º —Ä–∞–±–æ—á–µ–≥–æ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
            await execute_db("""
                UPDATE hired_workers SET status = 'consumed' WHERE id = $1
            """, worker_id)

            count += 1

    return count

async def get_specialists_count(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"""
    results = await execute_db("""
        SELECT specialist_type, COUNT(*) as count
        FROM trained_specialists
        WHERE user_id = $1 AND status != 'dead'
        GROUP BY specialist_type
    """, user_id, fetch_all=True)

    return {row['specialist_type']: row['count'] for row in results} if results else {}

# ================== ISLAND STATS ==================

async def get_island_stats() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç—Ä–æ–≤–∞"""
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        result = await execute_db("SELECT COUNT(*) as count FROM users", fetch_one=True)
        total_players = result['count'] if result else 0

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (–∑–∞—Ö–æ–¥–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è)
        result = await execute_db("""
            SELECT COUNT(*) as count FROM users 
            WHERE DATE(last_active) = CURRENT_DATE
        """, fetch_one=True)
        active_players = result['count'] if result else 0

        # RBTC –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
        result = await execute_db("""
            SELECT COALESCE(SUM(rbtc_found), 0) as total FROM expeditions 
            WHERE DATE(completed_at) = CURRENT_DATE
        """, fetch_one=True)
        daily_rbtc = float(result['total']) if result else 0.0

        # –ê–∫—Ç–∏–≤–Ω—ã–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
        result = await execute_db("""
            SELECT COUNT(*) as count FROM expeditions 
            WHERE status = 'active'
        """, fetch_one=True)
        active_expeditions = result['count'] if result else 0

        return {
            'total_players': max(42, total_players),
            'online_players': max(12, active_players),
            'daily_rbtc': max(15.67, daily_rbtc),
            'active_expeditions': max(8, active_expeditions)
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'total_players': 42,
            'online_players': 12,
            'daily_rbtc': 15.67,
            'active_expeditions': 8
        }

logger.info("‚úÖ Database models loaded (PostgreSQL/Supabase only)")
