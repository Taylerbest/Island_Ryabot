"""
–ü—Ä–æ—Å—Ç—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
–ó–∞–ø—É—Å–∫: python admin_tools.py
"""
import asyncio
import aiosqlite
from database.models import DB_PATH, get_user, update_user_resources


async def give_resources(user_id: int, ryabucks: int = 0, rbtc: float = 0.0):
    """–í—ã–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if ryabucks > 0 or rbtc > 0:
        await update_user_resources(user_id, ryabucks=ryabucks, rbtc=rbtc)
        print(f"‚úÖ –í—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {ryabucks}üíµ {rbtc}RBTC")


async def set_level(user_id: int, level: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET level = ? WHERE user_id = ?", (level, user_id))
        await db.commit()
    print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}")


async def reset_user(user_id: int):
    """–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
                         UPDATE users
                         SET level              = 1,
                             experience         = 0,
                             energy             = 100,
                             ryabucks           = 1000,
                             rbtc               = 0.0,
                             tutorial_completed = 0
                         WHERE user_id = ?
                         """, (user_id,))
        await db.commit()
    print(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω")


async def list_users():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT user_id, username, level, ryabucks, rbtc FROM users")
        users = await cursor.fetchall()

    print("\nüìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
    for user in users:
        print(f"ID: {user[0]} | @{user[1]} | Lvl: {user[2]} | üíµ{user[3]} | ü™ô{user[4]:.2f}")


async def main():
    print("üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Ryabot Island")
    print("=" * 50)
    print("1. –í—ã–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å")
    print("3. –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
    print("4. –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("0. –í—ã—Ö–æ–¥")

    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ")

    if choice == "1":
        user_id = int(input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
        ryabucks = int(input("–†—è–±–∞–∫—Å—ã: "))
        rbtc = float(input("RBTC: "))
        await give_resources(user_id, ryabucks, rbtc)
    elif choice == "2":
        user_id = int(input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
        level = int(input("–£—Ä–æ–≤–µ–Ω—å: "))
        await set_level(user_id, level)
    elif choice == "3":
        user_id = int(input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
        await reset_user(user_id)
    elif choice == "4":
        await list_users()


if __name__ == "__main__":
    asyncio.run(main())
