"""
–ü—Ä–æ—Å—Ç—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (PostgreSQL)
–ó–∞–ø—É—Å–∫: python admin_tools.py
"""
import asyncio
from database.models import execute_db, get_user, initialize_db_pool, close_connection_pool

async def give_resources(user_id: int, ryabucks: int = 0, rbtc: float = 0.0):
    """–í—ã–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if ryabucks > 0:
        await execute_db("UPDATE users SET ryabucks = ryabucks + $1 WHERE user_id = $2", ryabucks, user_id)
    if rbtc > 0:
        await execute_db("UPDATE users SET rbtc = rbtc + $1 WHERE user_id = $2", rbtc, user_id)

    print(f"‚úÖ –í—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {ryabucks}üíµ {rbtc}RBTC")

async def set_level(user_id: int, level: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await execute_db("UPDATE users SET level = $1 WHERE user_id = $2", level, user_id)
    print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}")

async def reset_user(user_id: int):
    """–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await execute_db("""
        UPDATE users SET 
            level = 1, experience = 0, energy = 100,
            ryabucks = 1000, rbtc = 0.0, tutorial_completed = FALSE
        WHERE user_id = $1
    """, user_id)
    print(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω")

async def list_users():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = await execute_db("""
        SELECT user_id, username, level, ryabucks, rbtc 
        FROM users ORDER BY created_at DESC LIMIT 10
    """, fetch_all=True)

    print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
    for user in users:
        print(f"ID: {user['user_id']} | @{user['username']} | Lvl: {user['level']} | üíµ{user['ryabucks']} | ü™ô{user['rbtc']:.2f}")

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await initialize_db_pool()

    print("üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Ryabot Island")
    print("=" * 50)
    print("1. –í—ã–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å")
    print("3. –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
    print("4. –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("0. –í—ã—Ö–æ–¥")

    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ")

    try:
        if choice == "1":
            user_id = int(input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
            ryabucks = int(input("–†—è–±–∞–∫—Å—ã: "))
            rbtc = float(input("RBTC: "))
            await give_resources(user_id, ryabucks, rbtc)
        elif choice == "2":
            user_id = int(input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
            level = int(input("–£—Ä–æ–≤–µ–Ω—å: "))
            await set_level(user_id, level)
        elif choice == "3":
            user_id = int(input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
            await reset_user(user_id)
        elif choice == "4":
            await list_users()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await close_connection_pool()

if __name__ == "__main__":
    asyncio.run(main())
